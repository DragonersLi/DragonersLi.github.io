<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李世龙的博客！</title>
  <subtitle>一入此门深似海，从此妹子是路人！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://DiorsCoder.github.io/"/>
  <updated>2017-07-11T02:55:20.804Z</updated>
  <id>http://DiorsCoder.github.io/</id>
  
  <author>
    <name>Dragoners.Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP操作MongoDB进行数据库集合文档复制至本地服务！</title>
    <link href="http://DiorsCoder.github.io/2017/06/16/PHP%E6%93%8D%E4%BD%9CMongodb%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E5%90%88%E6%96%87%E6%A1%A3%E5%A4%8D%E5%88%B6%E8%87%B3%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2017/06/16/PHP操作Mongodb进行数据库集合文档复制至本地服务！/</id>
    <published>2017-06-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:55:20.804Z</updated>
    
    <content type="html"><![CDATA[<p>####需求：把服务器mongo数据库，集合文档copy到本地</p>
<p>#####查手册：<a href="https://secure.php.net/manual/zh/book.mongo.php" target="_blank" rel="external">https://secure.php.net/manual/zh/book.mongo.php</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">//基于Thinkphp框架的mongodb 数据库，集合，文档复制方法</div><div class="line"> public function mongoCopy() &#123;</div><div class="line">	         set_time_limit(0); //解除php时间30秒限制</div><div class="line">        $con1 = new Mongo(&quot;mongodb://192.168.1.243:7788&quot;); // 连接到243</div><div class="line">		$con2 = new Mongo(&quot;mongodb://127.0.0.1:27017&quot;); // 连接到本地</div><div class="line">		$dbs = $this-&gt;getDBs($con1); //获取服务器端所有表</div><div class="line">		foreach($dbs as $k1=&gt;$v1)&#123;  </div><div class="line">			$c = $this-&gt;getCollections($con1,$v1[&apos;name&apos;]);  //获取单个集合的所有文档</div><div class="line">			foreach($c as $k2=&gt;$v2)&#123;</div><div class="line">				$res = $this-&gt;setCollection($con1,$v1[&apos;name&apos;],$v2,$con2); //把服务端mongo数据库，集合文档复制到本地</div><div class="line">			&#125;</div><div class="line">	    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">     //获取所有数据库</div><div class="line">    //传递mongo配置</div><div class="line">   //返回所有数据库</div><div class="line">	private function getDBs($con)&#123; </div><div class="line">		 $db = $con-&gt;listDBs();</div><div class="line">		 return $db[&apos;databases&apos;];</div><div class="line">		 </div><div class="line">	&#125;</div><div class="line"></div><div class="line">     //获取所有集合方法</div><div class="line">    //传递mongo配置，单个数据库</div><div class="line">   //返回所有此数据库下所有集合</div><div class="line">	private function getCollections($con,$db)&#123; </div><div class="line">		 </div><div class="line">		 $collections = $con-&gt;$db-&gt;getCollectionNames();//循环获取单条数据库下的所有集合</div><div class="line">		 return $collections;</div><div class="line">		 </div><div class="line">		 </div><div class="line">	&#125;</div><div class="line"></div><div class="line">     //获取所有文档插入$con2方法</div><div class="line">    //copy数据库和集合文档</div><div class="line">    //传递mongo配置，单个数据库，单个集合，复制到的第二个mongo配置</div><div class="line">   //逐条进行读取插入，成功返回success，失败返回failed</div><div class="line">	private function setCollection($con1,$db,$collection,$con2)&#123;//集合//使用游标获取所有文档	</div><div class="line">			</div><div class="line">		$cursor = $con1-&gt;$db-&gt;selectCollection($collection)-&gt;find();</div><div class="line">		foreach ( $cursor as $k =&gt; $v )&#123;      </div><div class="line">			$result = $con2-&gt;$db-&gt;$collection-&gt;insert($v); #简单插入</div><div class="line">			echo $result ? &apos;success&apos; : &apos;failed&apos;;echo &quot;&lt;br&gt;&quot;; </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-58a63a2692d3ae08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2017/06/16/PHP操作Mongodb进行数据库集合文档复制至本地服务！/">http://DiorsCoder.github.io/2017/06/16/PHP操作Mongodb进行数据库集合文档复制至本地服务！/</a></p>
]]></content>
    
    <summary type="html">
    
      PHP操作MongoDB进行数据库集合文档复制至本地服务！
    
    </summary>
    
      <category term="MongoDB笔记" scheme="http://DiorsCoder.github.io/categories/MongoDB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MongoDB" scheme="http://DiorsCoder.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>SPHINX学习笔记！</title>
    <link href="http://DiorsCoder.github.io/2017/06/16/SPHINX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2017/06/16/SPHINX学习笔记！/</id>
    <published>2017-06-15T19:30:15.000Z</published>
    <updated>2017-07-11T02:56:34.750Z</updated>
    
    <content type="html"><![CDATA[<p>一：什么是sphinx<br>sphinx是一个基于SQL的全文检索引擎，可以结合mysql，postgreSQL做全文搜索，它可以提供比数据库本身更专业的搜索功能。使得应用程序更容易实现专业化的全文检索。sphinx特别为一些脚本语言设计搜索API接口，如php，python，perl，ruby等。同时为mysql也专业设计了一个存储引擎插件。（扩展：还有Lucence）</p>
<p>二：什么时候使用？<br>在MYSQL中当对一个文本类型的字段进行LIKE 并以%开头的查询时，会进行全表扫描。<br>比如 我们商品中有商品500万件。如果我们要搜索商品名称中带红色的，如果不且SPHINX肯定是这样写：<br>原因一、全表扫描慢：<br>SELECT * FROM php34_goods WHERE goods_name LIKE ‘%红色%’;<br>这条SQL会进行全表扫描，所以性能非常慢，查询速度非常慢。<br>原因二、MYSQL没有中文分词，而一般对短语搜索时必须分词才能搜索<br>sphinx就可以解决以上两个问题：<br>总结：当一个功能需要对表中text,varchar等文本类型的字段进行LIKE 查询时，如（根据歌词搜索歌曲这个功能）MYSQL是全表扫描非常慢，需要使用SPHINX：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-e38056fa1b1afc2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>
<p>我们商城中的根据关键字搜索的功能需要使用SPHINX优化。1.解决性能问题 2.解决中文分词的问题</p>
<p>三、怎么用<br>sphinx有两种使用方式：<br>用法一原始用法：SPHINX和mysql是两个独立的服务器</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-e1e0e6b24b0dc5a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br>流程：</p>
<ol>
<li>PHP要先把要搜索的短语发给SPHINX服务器，SPHINX返回的是记录的ID</li>
<li>PHP 再使用sphinx返回的ID查询数据库<br>用法一、：shpinxse:把SPHINX集成到MYSQL里去（没有单独的shpinx服务器）</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a6164c0716795ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"><br>PHP只需要写一个SQL语句即可，不用很管SPHINX，MYSQL会自己连接查询sphinx。如果要使用这种 需要在LINUX下重新编译MYSQL，把SPHINX当成插件编译到MYSQL中去。</p>
<p>实际操作：</p>
<ol>
<li><p>先下载sphinx的包， coreseek可以理解成加了中文语言包的sphinx(sphinx默认支持俄语和英语，不支持中文)</p>
</li>
<li><p>下载包之后几个重要文件说明：</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-f19167b3b03d4a84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a8a8dc43fa917794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-28395fa0ab404375.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p>
<ol>
<li>实际应用：先复制MYSQL的配置文件模板到根目录下并改名为sphinx.conf</li>
<li>配置文件配置好之后就可以使用这个文件生成索引了：</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-32fae50159f2f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.png"></p>
<ol>
<li>安装sphinx服务器</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-07fa7f44bd022bfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="12.png"></p>
<ol>
<li>打开服务窗口启用sphinx:</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-c63a91fe3c508955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="13.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-2d8e73e257c84962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="14.png"></p>
<ol>
<li>写PHP代码操作SPHINX<br>A.    先复制coreseek包中的sphinxapi.php文件到项目中：</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-1d11bdb6f6f56bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="22.png"><br>B 写PHP代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-95e301504d6a202b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="23.png"></p>
<p>sphinx自动更新<br>在使用SPHINX生成索引时只会为当前数据库中的数据生成索引，生成索引之后如果在数据库中又添加了新的数据那么在SPHINX是无法搜索到新的数据的，需要把新的数据也生成索引并添加到SPHINX中去才行。<br>如果每次插入新的数据之后都要手动再重建索引太麻烦了，所以我们一般要配置SPHINX每隔一段时间自动把数据库中最新插入的数据重新新的索引文件，并把这个新的索引文件合并到主索引文件上。</p>
<p>实际操作：</p>
<ol>
<li>每次生成索引文件之后，要把最后一条记录的ID保存下来，下次ID大于这个ID就是新的数据<br>a. 建一张表用来保存这个ID</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-db4c4f90df12746a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="31.png"><br>b. 配置SPHINX让每次生成索引之后能够直接 把最大的ID更新进来 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-f0bfebeee2f2444b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="b.png"></p>
<ol>
<li>定期为新添加的数据生成索引<br>a. 修改sphinx定义一个新的数据源（新插入的还没有创建索引的数据）<br><img src="http://upload-images.jianshu.io/upload_images/2255249-68cfab6975b69789.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c.png"><br>b. 再添加一个index索引（每个数据源对应一个index）</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-75d57c42c59789bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="d.png"><br>c. 写一个bat脚本，让这个定期用新的数据源生成索引文件，并把这个索引文件合并到主索引（第一次生成的索引文件）文件上。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-f6ff31cef65c4e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="e.png"><br>d. 配置windows系统让系统定期执行这个bat.脚本即可：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a73f5516d02dce35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="f.png"></p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2017/06/16/SPHINX学习笔记！/">http://DiorsCoder.github.io/2017/06/16/SPHINX学习笔记！/</a></p>
]]></content>
    
    <summary type="html">
    
      SPHINX学习笔记！
    
    </summary>
    
      <category term="SPHINX笔记" scheme="http://DiorsCoder.github.io/categories/SPHINX%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="SPHINX" scheme="http://DiorsCoder.github.io/tags/SPHINX/"/>
    
  </entry>
  
  <entry>
    <title>windows下MongoDB介绍及下载与安装!</title>
    <link href="http://DiorsCoder.github.io/2017/06/16/Windows%E4%B8%8BMongoDB%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85!/"/>
    <id>http://DiorsCoder.github.io/2017/06/16/Windows下MongoDB介绍及下载与安装!/</id>
    <published>2017-06-15T19:30:15.000Z</published>
    <updated>2017-07-11T02:55:49.601Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引言</strong><br>    MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bjson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。<br>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：<br>面向集合存储，易存储对象类型的数据。</p>
<p>模式自由。</p>
<p>支持动态查询。</p>
<p>支持完全索引，包含内部对象。</p>
<p>支持查询。</p>
<p>支持复制和故障恢复。</p>
<p>使用高效的二进制数据存储，包括大型对象（如视频等）。</p>
<p>自动处理碎片，以支持云计算层次的扩展性</p>
<p>支持RUBY，PYTHON，JAVA，C++，PHP等多种语言。</p>
<p>文件存储格式为BSON（一种JSON的扩展）</p>
<p>可通过网络访问</p>
<p>所谓“面向集合”（Collenction-Orented），意思是数据被分组存储在数据集中，被称为一个集合（Collenction)。每个 集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定 义任何模式（schema)。模式自由（schema-free)，意味着对于存储在mongodb数据库中的文件，我们不需要知道它的任何结构定义。如果需要的话，你完全可以把不同结构的文件存储在同一个数据库里。存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各中复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized dOcument Format）。<br>MongoDB服务端可运行在Linux、Windows或OS X平台，支持32位和64位应用，默认端口为27017。推荐运行在64位平台，因为MongoDB<br>在32位模式运行时支持的最大文件尺寸为2GB。<br>MongoDB把数据存储在文件中（默认路径为：/data/db），为提高效率使用内存映射文件进行管理。<br>以上为随便摘的，其实就是非传统的非关系数据库，现在归到文档型数据库分类之中，注意32位操作系统支持的最大文件为2GB，所以做大文件海量储存的朋友要选择64位的系统安装。开始我们的下载安装之路吧。</p>
<p> MongoDB 是介于关系型数据库和非关系型数据库之间的一种NoSQL数据库，用C++编写，是一款集敏捷性、可伸缩性、扩展性于一身的高性能的面向文档的通用数据库。</p>
<p> MongoDB 具有以下几个特征：</p>
<p>　　　　a）、灵活的文档数据模型</p>
<p>　　　　　　　　可以非常容易的存储不同结构的的数据，并且还能动态的修改这些数据的源结构模式</p>
<p>　　　　b）、可伸缩可扩展性</p>
<p>　　　　　　　　从单个服务器到数千个节点，MongoDB可以很轻松的进行水平扩展，部署多个数据中心</p>
<p>　　　　c）、二级索引</p>
<p>　　　　　　　　包括在完全一致的任何字段上的索引、地理空间、文本搜索以及TTL索引，都能进行快速、细粒度的访问到数据</p>
<p>　　　　d）、丰富的查询语言</p>
<p>　　　　　　　　MongoDB的查询语言提供了多样化的字段级别的操作符、数据类型以及即时更新。几乎提供了所有编程语言的驱动来更直观的使用它</p>
<p>　　　　e）、健壮的操作工具</p>
<p>　　　　　　　　MongoDB的管理服务和运维管理工具可以使你很轻松的部署，监控、备份和规划它</p>
<p> MongoDB 以下几个使用场合：</p>
<p>　　　　a）、需要写入大量的数据，但是这些这些数据的价值并不是太高，比如：日志</p>
<p>　　　　b）、数据增长量较大，而且数据结构有时候还不一致</p>
<p>　　　　c）、未来数据会很大</p>
<p>MongoDB的官网是：<a href="http://www.mongodb.org/" target="_blank" rel="external">http://www.mongodb.org/</a><br>MongoDB最新版本下载在官网的DownLoad菜单下：<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a><br>MongoDB For .net 驱动开发包位于官网的Driver菜单下（含其它语言开发链接）：<a href="https://github.com/mongodb/mongo-csharp-driver/downloads" target="_blank" rel="external">https://github.com/mongodb/mongo-csharp-driver/downloads</a></p>
<p>下载安装完成后接着在目录下新建:<br>存放数据文件夹：D:\workplace\mongodb\db\<br>存放日志文件夹：D:\workplace\mongodb\log\<br>存放日志文件：D:\workplace\mongodb\log\mongodb.log<br>存放配置文件：D:\workplace\mongodb\mongodb.conf</p>
<p> mongodb.conf文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dbpath=D:\workplace\mongodb\db #数据库路径</div><div class="line">logpath=D:\workplace\mongodb\log\mongodb.log #日志输出文件路径</div><div class="line">logappend=true #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</div><div class="line">journal=true #启用日志文件，默认启用</div><div class="line">quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</div><div class="line">port=27017 #端口号 默认为27017</div></pre></td></tr></table></figure></p>
<p>开启mongodb服务，以管理员身份启动dos命令窗口，启动mongodb服务之后，可在服务中看到mongodb服务，下次直接执行bin目录下的mongo.exe客户端就可以进行操作了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\workplace\mongodb\bin&gt;</div><div class="line">mongod.exe --config D:\workplace\mongodb\mongodb.conf  --install   --serviceName &quot;mongodb&quot;  </div><div class="line">  </div><div class="line">D:\workplace\mongodb\bin&gt;net start mongodb  </div><div class="line">#或者</div><div class="line">D:\workplace\mongodb\bin&gt;sc start mongodb  </div><div class="line">#打开windows服务查看</div><div class="line">D:\workplace\mongodb\bin&gt;services.msc</div><div class="line"> </div><div class="line">```  </div><div class="line">打开：http://localhost:27017/显示如下：</div><div class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port. </div><div class="line">表示OK了！</div><div class="line">如果php 操作 mongodb报错：Fatal error: Class &apos;Mongo&apos; not found</div><div class="line">解决办法：http://windows.php.net/downloads/pecl/releases/</div><div class="line">下载mongodb和mongo的php扩展都下载放到php的ext目录；</div><div class="line">推荐两款图形化管理软件：MongoVUE和Robomongo</div></pre></td></tr></table></figure>
<p>demo:<br>插入数据：db.User.insert({“id”:1,”username”:”admin”,”age”:18});<br>查询数据：db.User.find();<br>查询具体数据：db.User.find({“usrname”:”test”});</p>
<p>```</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2017/06/16/Windows下MongoDB介绍及下载与安装!/">http://DiorsCoder.github.io/2017/06/16/Windows下MongoDB介绍及下载与安装!/</a></p>
]]></content>
    
    <summary type="html">
    
      windows下MongoDB介绍及下载与安装!
    
    </summary>
    
      <category term="MongoDB笔记" scheme="http://DiorsCoder.github.io/categories/MongoDB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MongoDB" scheme="http://DiorsCoder.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>解决Apache-80端口占用问题！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/%E8%A7%A3%E5%86%B3Apache-80%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/解决Apache-80端口占用问题！/</id>
    <published>2016-10-15T19:30:16.000Z</published>
    <updated>2017-07-11T04:09:19.838Z</updated>
    
    <content type="html"><![CDATA[<p>突然有一天Apache无法启动，查看是否80端口被占用， win+r 运行cmd，输入netstat -ano<br><img src="http://upload-images.jianshu.io/upload_images/2255249-d3d8df4e7294eaa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2255249-38813bd731f8c476.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>可以看到80端口被PID9728占用，于是快捷键：ctr+alt+del 打开任务管理器-进程-查看，选择列，勾选PID可以看到pid 9728 的被 nginx 占用！<br>结束进程树，重试！~</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/解决Apache-80端口占用问题！/">http://DiorsCoder.github.io/2016/10/16/解决Apache-80端口占用问题！/</a></p>
]]></content>
    
    <summary type="html">
    
      解决Apache 80端口占用问题！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Apache" scheme="http://DiorsCoder.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Windows下PHP服务nginx不能使用file_get_contents-curl-fopen的原因！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/Windows%E4%B8%8BPHP%E6%9C%8D%E5%8A%A1Nginx%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8file_get_contents-curl-fopen%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/Windows下PHP服务Nginx不能使用file_get_contents-curl-fopen的原因！/</id>
    <published>2016-10-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:14:57.933Z</updated>
    
    <content type="html"><![CDATA[<p>#转：</p>
<p>####今天研究一个项目用到file_get_contents获取本地虚拟主机：<a href="http://blog.cc/index.php" target="_blank" rel="external">http://blog.cc/index.php</a> 文件结果等了半天超时也没获取到信息，试了<a href="http://localhost/index.php" target="_blank" rel="external">http://localhost/index.php</a> 也不行。本地电脑php环境为：nginx+php+mysql；于是找到这篇文章做个笔记，记录下！</p>
<p>这两天一直在搞windows下nginx+fastcgi的file_get_contents请求。我想，很多同学都遇到当file_get_contents请求外网的http/https的php文件时毫无压力，比如echo file_get_contents(‘<a href="http://www.baidu.com’" target="_blank" rel="external">http://www.baidu.com’</a>) ，它会显示百度的页面。但当你请求localhost/127.0.0.1本地网络的php服务时却一直是timeout，无论你将请求时间和脚本运行时间多长都无法返回数据，如file_get_contents(‘<a href="http://localhost/phpinfo.php’" target="_blank" rel="external">http://localhost/phpinfo.php’</a>) 。然而当你尝试请求html这样的静态文件时却完全没有问题。是什么原因呢？！</p>
<p>首先，我们知道file_get_contents/curl/fopen打开一个基于tcp/ip的http请求时，请求数据发送到nginx，而nginx则委托给php-cgi(fastcgi)处理php文件，一般情况fastcgi处理完一个php请求后会马上释放结束信号，等待下一个处理请求（当然也有程序假死，一直占用资源的情况）。打开nginx.conf，我们看到下面这一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~ .php &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  d:/www/htdocs$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面已经清楚地看到，所有使用php结尾的文件都经过fastcgi处理，而在php.ini的配置文件中也有一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cgi.force_redirect = 1</div></pre></td></tr></table></figure></p>
<p>表明，所有php程序安全地强制转向交给cgi处理。</p>
<p>但在windows中，本地127.0.0.1:9000怎样与php-cgi联系的呢？！答案是增加一个php-cgi进程，用它来监听127.0.0.1:9000。通过控制器命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RunHiddenConsole.exe D:/www/php/php-cgi.exe  -b 127.0.0.1:9000 -c C:/WINDOWS/php.ini</div></pre></td></tr></table></figure></p>
<p>我们就可以在启动windows时，开启一个php-cgi.exe进程监听来自127.0.0.1:9000 的请求。在dos命令下打开netstat –a就可以看到本地计算机下的9000端口处于listening状态（也就是空置，如果没有发送任何请求的话）。</p>
<p>好了，该说说在php中使用file_get_contents()、curl()、fopen()函数访问localhost时为什么不能返回结果。我们再来试验在index.php中加入file_get_contents(‘<a href="http://127.0.0.1/phpinfo.php’" target="_blank" rel="external">http://127.0.0.1/phpinfo.php’</a>) 语句向phpinfo.php发送一个请求，这时浏览器中的状态指示一直在打转，表示它一直在工作中。打开Dos中的netstat命令，可以看到本地的9000端口的状态为：ESTABLISHED，表示该进程在联机处理中。实际上，这里我们已经同时向nginx发送了两个基于http的php请求，一个是解析index.php，而另一个是phpinfo.php，这样矛盾就出来了，因为我们的windows系统只加载了一个http进程，因此，它无法同时处理两个php请求，它只能先处理第一个请求（index.php），而index.php却又在等待phpinfo.php处理结果，phpinfo.php没人帮它处理请求，因为它一直在等待index.php释放结束信号，因此，造成了程序的阻塞状态，陷入了死循环。所以我们就看到了浏览器的状态指示一直在打转。Curl()与fopen函数的原因也相同。</p>
<p>找到了原因，我们也就有了解决办法。</p>
<p>一是，向系统增加一个http请求，当一个php-cig内要加载另一个请求时，它能够分配其它http处理额外的php请求。这时需给另一个http sever分配不同的端口，比如8080。nginx的案例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">http &#123;  </div><div class="line">	server &#123;  </div><div class="line">		listen          80;  </div><div class="line">		server_name     127.0.0.1;  </div><div class="line">		location / &#123;  </div><div class="line">			index index.php;  </div><div class="line">			root  /web/www/htdocs;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">	server &#123;  </div><div class="line">		listen          8080;  </div><div class="line">		server_name     127.0.0.1;  </div><div class="line">		location / &#123;  </div><div class="line">			index index.html;  </div><div class="line">			root  /web/www/htdocs;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">	include    /opt/nginx/conf/vhosts/php.conf;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，端口80与8080可以分别处理不同的程序，比如：</p>
<p>test.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo file_get_contents(&apos;http://localhost:8080/phpinfo.php&apos;);</div></pre></td></tr></table></figure></p>
<p> 当然，在*unix下有更多选择，比如fork。</p>
<p>另外提醒下，网上有人说，通过去掉地址中的<a href="http://协议标记，而使用相对地址就规避函数的检查，实际情况是不是这样呢？！当在index.php中使用file_get_contents(‘phpinfo.php’" target="_blank" rel="external">http://协议标记，而使用相对地址就规避函数的检查，实际情况是不是这样呢？！当在index.php中使用file_get_contents(‘phpinfo.php’</a>); 时，我们可以看到函数输出了phpinfo.php的源代码，相当于file_get_contents(‘file:\c:wwwphpinfo.php’); ，它实际上只是读取你的文本内容，因为file_get_contents()函数首先是处理file协议的，而curl则直接报错无法解析。因此这些人纯粹是不学无术的骗子。</p>
<p>还有人提出修改hosts文件，增加localhost www.xxx.com影射关系，函数通过www.xxx.com访问本地php，这其实也是不治本的偏方，因为这只是方便计算机的dns解析，最终www.xxx.com交给127.0.0.1，而后者交给唯一http，还是阻塞。</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/Windows下PHP服务Nginx不能使用file_get_contents-curl-fopen的原因！/">http://DiorsCoder.github.io/2016/10/16/Windows下PHP服务Nginx不能使用file_get_contents-curl-fopen的原因！/</a></p>
]]></content>
    
    <summary type="html">
    
      Windows下PHP服务nginx不能使用file_get_contents-curl-fopen的原因！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Nginx" scheme="http://DiorsCoder.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nignx根据端口号配置虚拟主机，并重启加载！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/Nginx%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E5%8F%B7%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%EF%BC%8C%E5%B9%B6%E9%87%8D%E5%90%AF%E5%8A%A0%E8%BD%BD%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/Nginx根据端口号配置虚拟主机，并重启加载！/</id>
    <published>2016-10-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:12:58.965Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2255249-f164890e7bbcaf5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###配置完重启！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd /usr/local/nginx/sbin   #进入nginx</div><div class="line"></div><div class="line">./nginx -s reload          #重启加载配置</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-90de8e2f083d988a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="浏览器访问ok！"><a href="#浏览器访问ok！" class="headerlink" title="浏览器访问ok！"></a>浏览器访问ok！</h3><p><img src="http://upload-images.jianshu.io/upload_images/2255249-0e9503982cfc6ea9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###配置文件内容! </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen       83;   #端口号</div><div class="line">    server_name quda.septwolves.cn;  #主机名</div><div class="line">    index  index.php index.html index.htm;</div><div class="line">    root   /data/webserver/qpl/ymall; #主机所在文件夹</div><div class="line">	error_page  404              /404.html; # 错误页面</div><div class="line">    location / &#123;</div><div class="line">        if (!-e $request_filename)&#123;</div><div class="line">            rewrite ^/(.*)$ /index.php/$1 last;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     location ~ \.php($|/) &#123;</div><div class="line">	  set $script     $uri;</div><div class="line">        set $path_info  &quot;&quot;;</div><div class="line">        if ($uri ~ &quot;^(.+?\.php)(/.+)$&quot;) &#123;</div><div class="line">            set $script     $1;</div><div class="line">            set $path_info  $2;</div><div class="line">        &#125;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">	include        fastcgi_params;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$script;</div><div class="line">        fastcgi_param  SCRIPT_NAME        $script;</div><div class="line">        fastcgi_param  PATH_INFO          $path_info;  </div><div class="line">    &#125;</div><div class="line">	location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</div><div class="line">        expires      1d;</div><div class="line">    &#125;</div><div class="line">    location ~ .*\.(js|css)?$ &#123;</div><div class="line">        expires      12h;</div><div class="line">    &#125;</div><div class="line">    location  /ngx_status &#123;</div><div class="line">	stub_status on;</div><div class="line">	access_log off;</div><div class="line">	#allow 127.0.0.1;</div><div class="line">	#deny all;</div><div class="line">    &#125;</div><div class="line">    access_log  /var/log/nginx/access_ymall.log; #日志文件</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/Nginx根据端口号配置虚拟主机，并重启加载！/">http://DiorsCoder.github.io/2016/10/16/Nginx根据端口号配置虚拟主机，并重启加载！/</a></p>
]]></content>
    
    <summary type="html">
    
      nignx根据端口号配置虚拟主机，并重启加载！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
      <category term="Nginx" scheme="http://DiorsCoder.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Apache本地配置多域名(wampserver本地配置多域名)</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/Apache%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%9F%9F%E5%90%8D(wampserver%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%9F%9F%E5%90%8D)/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名(wampserver本地配置多域名)/</id>
    <published>2016-10-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:29:28.910Z</updated>
    
    <content type="html"><![CDATA[<p>我们在本地开发时，一般是在浏览器输入 <a href="http://localhost/项目文件夹名" target="_blank" rel="external">http://localhost/项目文件夹名</a> 来测试网页文件，你有没有想过在本地在浏览器输入你自己设定的一个域名进入项目文件夹中去，本地配置多域名可以测试二级域名以及其他与域名相关的问题。</p>
<p>比如我想配置一个主域名www.test.com和二级域名img.test.com(其实二级域名与配置另外一个独立域名的原理是一样的)</p>
<p>第一步：打开本地系统安装目录，比如我安装的是windows7，安装在c盘，进入目录C:\Windows\System32\drivers\etc<br>找到一个叫hosts的文件，用记事本打开：<br>在文件结尾加入以下代码：<br>127.0.0.1 www.lz13.com<br>127.0.0.1 www.vivijk.com<br>127.0.0.1 localhost<br>输入完成后保存。<br>hosts文件修改不能保存问题：开始-&gt;附件-&gt;记事本以管理员身份运行，打开编辑保存！<br>第二步：打开apache的安装位置，如我用的是wampserver，安装目录为：D:\wamp\bin\apache\Apache2.2.21<br>打开一个叫conf的文件夹，它是apache的配置文件夹<br>打开一个叫httpd.conf文件<br>搜索一下Directory，找到一个如：<directory "d:="" wamp="" www="" "=""><br>的一行，看到<br>把代码：Order deny,allow<br>    deny from all<br>    Allow from 127.0.0.1<br>改成：<br> Order allow,deny<br>    Allow from all</directory></p>
<p>第三步：在刚才这个httpd.conf文件中，搜索Include conf/extra/httpd-vhosts.conf<br>去掉它前面的#，然后保存这个文件<br>第四步：打开conf这个文件夹下一个子目录：extra，找到一个httpd-vhosts.conf这个文件，一般是最后一个文件，<br>在文件最后添加上：</p>
  <virtualhost *:80=""><br><br>    DocumentRoot “D:/workspace/www/lz13”<br><br>    ServerName www.lz13.com<br><br> </virtualhost>

 <virtualhost *:80=""><br><br>    DocumentRoot “D:/workspace/www/vivijk”<br><br>    ServerName www.vivijk.com<br><br> </virtualhost>

 <virtualhost *:80=""><br><br>    DocumentRoot “D:/workspace/www/“<br><br>    ServerName localhost<br><br> </virtualhost>


<p>这个根据目录根据自己的apache文件目录来自行调整，我的apache工作目录为D:/wamp/www/,改成自己的apache工作目录即可。</p>
<p>最后一步，重启apache，在浏览器中输入：www.test.com会出现test文件夹的默认的内容</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名(wampserver本地配置多域名)/">http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名(wampserver本地配置多域名)/</a></p>
]]></content>
    
    <summary type="html">
    
      Apache本地配置多域名(wampserver本地配置多域名)
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Apache" scheme="http://DiorsCoder.github.io/tags/Apache/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>VPN连接之后无法上网问题解决方法！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/VPN%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%90%8E%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/VPN连接之后无法上网问题解决方法！/</id>
    <published>2016-10-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:14:00.272Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2255249-ae87efbf71a6a670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2255249-b0204425ef8c9cde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-4a52d89235568864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-58f89fb5691d3860.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2255249-6442588f904d6c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>#####鼠标右键【VPN连接】 点击 【属性】找到 【网络】 选择【Internet协议版本4（tcp/Ipv4）】 双击</p>
<p>#####点击 【高级】把【在远程网络上使用默认网关】前面的勾去掉。一路确定就OK啦。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-6bf217fd143b6d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/VPN连接之后无法上网问题解决方法！/">http://DiorsCoder.github.io/2016/10/16/VPN连接之后无法上网问题解决方法！/</a></p>
]]></content>
    
    <summary type="html">
    
      VPN连接之后无法上网问题解决方法！
    
    </summary>
    
      <category term="Windows相关" scheme="http://DiorsCoder.github.io/categories/Windows%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Windows" scheme="http://DiorsCoder.github.io/tags/Windows/"/>
    
      <category term="VPN" scheme="http://DiorsCoder.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>局域网无法访问Vmware虚拟机WEB服务器解决办法！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEVmware%E8%99%9A%E6%8B%9F%E6%9C%BAWEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/局域网无法访问Vmware虚拟机WEB服务器解决办法！/</id>
    <published>2016-10-15T19:30:15.000Z</published>
    <updated>2017-07-11T04:38:04.044Z</updated>
    
    <content type="html"><![CDATA[<p>具体情况如下 ：</p>
<p>环境：虚拟机服务器是centos，apache+php+mysql环境，但是局域网无法访问</p>
<p>1.本机能ping通虚拟机 2.虚拟机也能ping通本机 3.虚拟机能访问自己的web 4.本机无法访问虚拟己的web</p>
<p>后来发现是防火墙将80端口屏蔽了的缘故。</p>
<p>检查是不是服务器的80端口被防火墙堵了，可以通过命令：</p>
<p>telnet {服务器ip}80 来测试。</p>
<p>解决方法如下： /sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT 然后保存： /etc/rc.d/init.d/iptables save 重启防火墙 /etc/init.d/iptables restart<br>CentOS防火墙的关闭，关闭其服务即可：</p>
<p>查看CentOS防火墙信息：</p>
<p>/etc/init.d/iptables status</p>
<p>关闭CentOS防火墙服务：</p>
<p>/etc/init.d/iptables stop</p>
<p>永久关闭防火墙：</p>
<p>chkconfig –level 35 iptables off</p>
<p>最后，打开主机浏览器，输入虚拟机地方，就可以访问虚拟机的WEB服务器了！</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/局域网无法访问Vmware虚拟机WEB服务器解决办法！/">http://DiorsCoder.github.io/2016/10/16/局域网无法访问Vmware虚拟机WEB服务器解决办法！/</a></p>
]]></content>
    
    <summary type="html">
    
      局域网无法访问Vmware虚拟机WEB服务器解决办法！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Vmware" scheme="http://DiorsCoder.github.io/tags/Vmware/"/>
    
  </entry>
  
  <entry>
    <title>Wamp的安装与配置图解</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/Wamp%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%9B%BE%E8%A7%A3%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/Wamp的安装与配置图解！/</id>
    <published>2016-10-15T19:30:15.000Z</published>
    <updated>2017-07-11T04:25:27.604Z</updated>
    
    <content type="html"><![CDATA[<p>先准备好软件：apache官方下载地址：apache_2.0.55-win32-x86-no_ssl.msi，更多版本在这里；php官方下载地址：php-5.0.5-Win32.zip，更多镜像下载地址，更多版本下载；mysql官方下载地址。</p>
<p>先准备好软件：</p>
<p>Apache官方下载地址：apache_2.0.55-win32-x86-no_ssl.msi，更多版本在这里；</p>
<p>php官方下载地址：php-5.0.5-Win32.zip，更多镜像下载地址，更多版本下载；</p>
<p>mysql官方下载地址：mysql-4.1.14-win32.zip，更多镜像下载地址，更多版本下载。</p>
<p>一、安装Apache，配置成功一个普通网站服务器</p>
<p>运行下载好的“apache_2.0.55-win32-x86-no_ssl.msi”，出现如下界面：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-ad5e1dc6e1d0a9de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>出现Apache HTTP Server 2.0.55的安装向导界面，点“Next”继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-1f1ad9ad34d147c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>确认同意软件安装使用许可条例，选择“I accept the terms in the license agreement”，点“Next”继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a1d7adfec7df9102.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>将Apache安装到Windows上的使用须知，请阅读完毕后，按“Next”继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-49237c5d442cdcaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>设置系统信息，在Network Domain下填入您的域名（比如：goodwaiter.com），在Server Name下填入您的服务器名称（比如：www.goodwaiter.com，也就是主机名加上域名），在Administrator’s Email Address下填入系统管理员的联系电子邮件地址（比如：yinpeng@xinhuanet.com），上述三条信息仅供参考，其中联系电子邮件地址会在当系统故障时提供给访问者，三条信息均可任意填写，无效的也行。下面有两个选择，图片上选择的是为系统所有用户安装，使用默认的80端口，并作为系统服务自动启动；另外一个是仅为当前用户安装，使用端口8080，手动启动。一般选择如图所示。按“Next”继续。]</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-04bc516fedfb009c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>选择安装类型，Typical为默认安装，Custom为用户自定义安装，我们这里选择Custom，有更多可选项。按“Next”继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-09e3814fda37582e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>出现选择安装选项界面，如图所示，左键点选“Apache HTTP Server 2.0.55”，选择“This feature, and all subfeatures, will be installed on local hard drive.”，即“此部分，及下属子部分内容，全部安装在本地硬盘上”。点选“Change…”，手动指定安装目录。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a5dd70996b224be5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>我这里选择安装在“D:\”，各位自行选取了，一般建议不要安装在操作系统所在盘，免得操作系统坏了之后，还原操作把Apache配置文件也清除了。选“OK”继续。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-845e76d8a1fd904b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>返回刚才的界面，选“Next”继续。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-3153533f1c25aedb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>确认安装选项无误，如果您认为要再检查一遍，可以点“Back”一步步返回检查。点“Install”开始按前面设定的安装选项安装。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-893599872502d6ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>正在安装界面，请耐心等待，直到出现下面的画面。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-bdf7b0072ca32fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>安装向导成功完成，这时右下角状态栏应该出现了下面的这个绿色图标，表示Apache服务已经开始运行，按“Finish”结束Apache的软件安装</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-bd316c3fc10b4939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>我们来熟悉一下这个图标，很方便的，在图标上左键单击，出现如下界面，有“Start（启动）”、“Stop（停止）”、“Restart（重启动）”三个选项，可以很方便的对安装的Apache服务器进行上述操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-a7793a5d1f39535e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>好了现在我们来测试一下按默认配置运行的网站界面，在IE地址栏打“<a href="http://127.0.0.1”，点“转到”，就可以看到如下页面，表示Apache服务器已安装成功。" target="_blank" rel="external">http://127.0.0.1”，点“转到”，就可以看到如下页面，表示Apache服务器已安装成功。</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-73d4ca65932efc5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>现在开始配置Apache服务器，使它更好的替我们服务，事实上，如果不配置，你的安装目录下的Apache2\htdocs文件夹就是网站的默认根目录，在里面放入文件就可以了。这里我们还是要配置一下，有什么问题或修改，配置始终是要会的，如图所示，“开始”、“所有程序”、“Apache HTTP Server 2.0.55”、“Configure Apache Server”、“Edit the Apache httpd conf Configuration file”，点击打开。</p>
<p>(图片较大，请拉动滚动条观看)</p>
<p>XP的记事本有了些小变化，很实用的一个功能就是可以看到文件内容的行、列位置，按下图所示，点“查看”，勾选“状态栏”，界面右下角就多了个标记，“Ln 78, Col 10”就表示“行 78，列 10”，这样可以迅速的在文件中定位，方便解说。当然，你也可以通过“编辑”，“查找”输入关键字来快速定位。每次配置文件的改变，保存后，必须在 Apache服务器重启动后生效，可以用前面讲的小图标方便的控制服务器随时“重启动”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-1bbed2489365b5e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>现在正式开始配置Apache服务器，“Ln 228”，或者查找关键字“DocumentRoot”（也就是网站根目录），找到如下图所示地方，然后将””内的地址改成你的网站根目录，地址格式请照图上的写，主要是一般文件地址的“\”在Apache里要改成“/”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-c27a739e67143f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>“Ln 253”，同样，你也可以通过查找“</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-c5d079d117d013ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>“Ln321”，DirectoryIndex（目录索引，也就是在仅指定目录的情况下，默认显示的文件名），可以添加很多，系统会根据从左至右的顺序来优先显示，以单个半角空格隔开，比如有些网站的首页是index.htm，就在光标那里加上“index.htm ”文件名是任意的，不一定非得“index.html”，比如“test.php”等，都可以。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-1696c50a733392fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>这里有一个选择配置选项，以前可能要配置，现在好像修正过来了，不用配置了，就是强制所有输出文件的语言编码，html文件里有语言标记（，这个就是设定文档语言为gb2312）的也会强制转换。如果打开的网页出现乱码，请先检查网页内有没有上述 html语言标记，如果没有，添加上去就能正常显示了。把“# DefaultLanguage nl”前面的“# ”去掉，把“nl”改成你要强制输出的语言，中文是“zh-cn”，保存，关闭。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-4c3215a2b60fddec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>好了，简单的Apache配置就到此结束了，现在利用先前的小图标重启动，所有的配置就生效了，你的网站就成了一个网站服务器，如果你加载了防火墙，请打开80或8080端口，或者允许Apache程序访问网络，否则别人不能访问。如果你有公网IP（一般ADSL或电话拨号上网的都是），就可以邀请所有能上网的朋友访问使用<a href="http://你的IP地址（IP地址查询可访问http://www.goodwaiter.com，查询内容内即是）你的网站了；如果你没有公网IP，也可以把内网IP地址告诉局域网内的其它用户，让他们通过http://你的内网IP地址，访问你的网站。" target="_blank" rel="external">http://你的IP地址（IP地址查询可访问http://www.goodwaiter.com，查询内容内即是）你的网站了；如果你没有公网IP，也可以把内网IP地址告诉局域网内的其它用户，让他们通过http://你的内网IP地址，访问你的网站。</a></p>
<p>首先来说明一下Apache目录下各个文件夹的作用： </p>
<p>bin：存放Apache运行的的各个软件，包括一个名为ad.exe的服务器调试工具 </p>
<p>conf：Apache的配置文件放在这个文件夹里面，我们要修改其中的httpd.conf文件 </p>
<p>htdocs：默认的web主目录，我们可以在httpd.conf中修改网站根目录的路径 </p>
<p>下面让我们来修改httpd.conf文件 </p>
<p>httpd.conf文件是Apache工作的重要配置文件，在X:Apache GroupApache2conf里面，找到并用记事本打开。大家可以参照下面进行修改： </p>
<p>ServerRoot “X:/Apache Group/Apache2” </p>
<p>这个是服务器的根路径，不用更改 </p>
<p>MaxKeepAliveRequests 100 </p>
<p>最大在线人数，根据你需要的人数和你服务器机器的配置来确定 </p>
<p>Listen 80 </p>
<p>Apache2监听端口，一般情况下不用改，也就是网站的http端口 </p>
<p>DocumentRoot “C:/htroot” </p>
<p>这个是你放置网页文件的地方，编译后的PHP文件就放在这里，一定要确保这个文件夹存在,这个也就是是你的站点目录 </p>
<p>同上，跟着上一步一起修改，确保文件夹的存在 </p>
<p>DirectoryIndex index.htm index.php index.html </p>
<p>这个是服务器默认打开的主页文档类型，可以改成如上的，中间用空格格开 </p>
<p>LanguagePriority zh-CN zh-TW en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv </p>
<p>语言优先级，把中文（zh-CN zh-TW）的部分剪切放到前面（也就是将原来文件中的相应部分改成如上的） </p>
<p>另外，如果想要禁止主页浏览，找到如下代码： </p>
<p>Options Indexes FollowSymLinks </p>
<p>去掉其中的indexes即可，即改成： </p>
<p>Options FollowSymLinks </p>
<p>第三步：PHP的挂载 </p>
<p>还是在httpd.conf中搜索LoadModule找到相关章节 ，在后面添加如下内容 </p>
<p>LoadModule php5_module “X:/PHP/php5Apache2.dll” </p>
<p>AddType application/x-httpd-php .php </p>
<p>注意:其中X:PHP/PHP5Apache2.dll 中的X:/PHP/是你安装PHP的路径 </p>
<p>重启Apache使修改生效</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/Wamp的安装与配置图解！/">http://DiorsCoder.github.io/2016/10/16/Wamp的安装与配置图解！/</a></p>
]]></content>
    
    <summary type="html">
    
      Wamp的安装与配置图解
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Apache" scheme="http://DiorsCoder.github.io/tags/Apache/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Apache本地配置多域名！</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/Apache%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%9F%9F%E5%90%8D%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名！/</id>
    <published>2016-10-15T19:30:15.000Z</published>
    <updated>2017-07-11T04:40:21.844Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LoadModule php5_module &quot;C:/workplace/workspace/PHP/php5apache2_2.dll&quot;</div><div class="line">addtype application/x-httpd-php .php</div><div class="line">PHPIniDir &quot;C:/workplace/workspace/PHP/&quot; php.ini文件加载</div><div class="line">LoadFile &quot;C:/workplace/workspace/PHP/libmysql.dll&quot; //无法加载mysql</div></pre></td></tr></table></figure>
<p>apache本地配置多域名(wampserver本地配置多域名) </p>
<p>我们在本地开发时，一般是在浏览器输入 <a href="http://localhost/项目文件夹名" target="_blank" rel="external">http://localhost/项目文件夹名</a> 来测试网页文件，你有没有想过在本地在浏览器输入你自己设定的一个域名进入项目文件夹中去，本地配置多域名可以测试二级域名以及其他与域名相关的问题。</p>
<p>比如我想配置一个主域名www.test.com和二级域名img.test.com(其实二级域名与配置另外一个独立域名的原理是一样的)</p>
<p>第一步：打开本地系统安装目录，比如我安装的是windows7，安装在c盘，进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\Windows\System32\drivers\etc</div><div class="line">找到一个叫hosts的文件，用记事本打开：</div><div class="line">在文件结尾加入以下代码：</div><div class="line">127.0.0.1 www.lz13.com</div><div class="line">127.0.0.1 www.vivijk.com</div><div class="line">127.0.0.1 localhost</div></pre></td></tr></table></figure></p>
<p>输入完成后保存。<br>hosts文件修改不能保存问题：开始-&gt;附件-&gt;记事本以管理员身份运行，打开编辑保存！<br>第二步：打开apache的安装位置，如我用的是wampserver，安装目录为：D:\wamp\bin\apache\Apache2.2.21<br>打开一个叫conf的文件夹，它是apache的配置文件夹<br>打开一个叫httpd.conf文件<br>搜索一下Directory，找到一个如：<directory "d:="" wamp="" www="" "=""><br>的一行，看到<br>把代码：改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /&gt;</div><div class="line">    Options FollowSymLinks</div><div class="line">    AllowOverride All</div><div class="line">    Order deny,allow</div><div class="line">    Deny from all</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></directory></p>
<p>第三步：在刚才这个httpd.conf文件中，搜索Include conf/extra/httpd-vhosts.conf<br>去掉它前面的#，然后保存这个文件<br>第四步：打开conf这个文件夹下一个子目录：extra，找到一个httpd-vhosts.conf这个文件，一般是最后一个文件，<br>在文件最后添加上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> &lt;VirtualHost *:80&gt;</div><div class="line"></div><div class="line">   DocumentRoot &quot;D:/workspace/www/lz13&quot;</div><div class="line"></div><div class="line">   ServerName www.lz13.com</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div><div class="line"></div><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line"></div><div class="line">   DocumentRoot &quot;D:/workspace/www/vivijk&quot;</div><div class="line"></div><div class="line">   ServerName www.vivijk.com</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div><div class="line"></div><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line"></div><div class="line">   DocumentRoot &quot;D:/workspace/www/&quot;</div><div class="line"></div><div class="line">   ServerName localhost</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>这个根据目录根据自己的apache文件目录来自行调整，<br>我的apache工作目录为D:/wamp/www/,改成自己的apache工作目录即可</p>
<p>最后一步，重启apache，在浏览器中输入：www.test.com会出现test文件夹的默认的内容</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名！/">http://DiorsCoder.github.io/2016/10/16/Apache本地配置多域名！/</a></p>
]]></content>
    
    <summary type="html">
    
      Apache本地配置多域名！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Apache" scheme="http://DiorsCoder.github.io/tags/Apache/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>基于Windows环境下的PHP开发环境搭建</title>
    <link href="http://DiorsCoder.github.io/2016/10/16/%E5%9F%BA%E4%BA%8EWindows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://DiorsCoder.github.io/2016/10/16/基于Windows环境下的PHP开发环境搭建/</id>
    <published>2016-10-15T19:30:15.000Z</published>
    <updated>2017-07-11T04:38:53.651Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备工作</p>
<p>Apache2.2.11</p>
<p>下载地址：<a href="http://www.apache.org" target="_blank" rel="external">http://www.apache.org</a></p>
<p>MySQL5.0</p>
<p>下载地址：<a href="http://www.mysql.com" target="_blank" rel="external">http://www.mysql.com</a></p>
<p>PHP5.2.9</p>
<p>下载地址：<a href="http://www.php.net" target="_blank" rel="external">http://www.php.net</a></p>
<p>二、配置PHP</p>
<p>1、 将php-5.2.9-win32.zip解压缩到指定位置（如C:\ ），并将其改为php[如下图]</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-4ee7b4f5d5fba9a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>2、打开php文件夹，并将php.ini-dist更名为php.ini[如下图]</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-6f2f600bf3be909d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3、 双击php.ini，进入到php.ini的编辑状态</p>
<p>4、 查找extension=php_gd2.dll和extension=php_mysql.dll，并去掉其前面的分号(;)，保存设置，然后关闭文件[如下图]<br><img src="http://upload-images.jianshu.io/upload_images/2255249-866f5a99679b2690.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>5、 将php/ext文件夹内的php_gd2.dll和php_mysql.dll复制到c:\windows\system32</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-baf2b89eecef097c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>6、 将php文件夹下的libmysql.dll复制到c:\windows\system32</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-0001010f36d6cc62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>7.保存设置</p>
<p>三、安装MySQL</p>
<p>1.双击MySQL安装文件，出现如下图所示的界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-87c31b526cb7f907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>2.选择安装类型：Typical(典型安装)、Custom(自定义安装)</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-37e7768f2807fe68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3.系统提示按照典型安装的配置如下图示所示<br><img src="http://upload-images.jianshu.io/upload_images/2255249-f9f019f870d022d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>4.安装进度条<br><img src="http://upload-images.jianshu.io/upload_images/2255249-62b66b1997b202af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>5.广告1<br><img src="http://upload-images.jianshu.io/upload_images/2255249-8e2817733325b389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>6.广告2</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-9d6d335042fa8a34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>7.询问是否进行MySQL服务器的配置</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-e16390bbd2ff025d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>8.MySQL服务器配置向导的欢迎界面<br><img src="http://upload-images.jianshu.io/upload_images/2255249-39a37fb1b242ffbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>9.选择配置类型:Detailed(详细配置)、Standard(标准配置)<br><img src="http://upload-images.jianshu.io/upload_images/2255249-24c59fcdc9a0fef5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>10.选择服务器类型：Developer Machine（开发测试类，MySQL占用很少资源）”、“Server Machine（服务器类型，MySQL占用较多资源）”、“Dedicated  MySQL Server Machine（专门的数据库服务器，MySQL占用所有可用资源）”</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-8d9713f640b2f57e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>11.选择MySQL数据库的用途：Multifunctional Database（通用多功能型，好）”、“Transactional Database Only（服务器类型，专注于事务处理，一般）”、“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对MyISAM数据类型的支持仅限于non-transactional）</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-dd8f63322e69dd89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol>
<li>对InnoDB Tablespace进行配置，就是为InnoDB 数据库文件选择一个存储空间，如果修改了，要记住位置，重装的时候要选择一样的地方，否则可能会造成数据库损坏。<br><img src="http://upload-images.jianshu.io/upload_images/2255249-5529cc7ffb904de2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<ol>
<li><p>选择您的网站的一般mysql访问量，同时连接的数目，“Decision Support(DSS)/OLAP（20个左右）”、“Online Transaction Processing(OLTP)（500个左右）”、“Manual Setting（手动设置，自己输一个数）”</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-69b9254f1e20c184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li><p>是否启用TCP/IP连接，设定端口，如果不启用，就只能在自己的机器上访问MySQL数据库了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-603a1b466c412568.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li><p>对MySQL默认数据库语言编码进行设置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-79eaf32ff9489f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li>选择是否将MySQL安装为windows服务，还可以指定Service Name（服务标识名称），是否将mysql的bin目录加入到Windows PATH</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-45d81dbccf284fe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol>
<li><p>询问是否要修改默认root用户（超级管理）的密码（默认为空）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-642dd9c02cb03e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li>确认设置无误，如果有误，按“Back”返回检查。按“Execute”使设置生效。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-392d06723004cc06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>四、安装Apache</p>
<p>1、双击Apache的安装文件，出现如下图所示的界面<br><img src="http://upload-images.jianshu.io/upload_images/2255249-13302cdf71d0e854.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>2、确认同意软件安装使用许可条例，选择“I accept the terms in the license agreement”，点“Next”继续</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-5b0e70367f7ccd16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3、将Apache安装到Windows上的使用须知，请阅读完毕后，按“Next”继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-f56a5a6ee840675c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>4、设置系统信息，在Network Domain下填入您的域名（比如：wuhua.com），在Server Name下填入您的服务器名称（比如：www.wuhua.com，也就是主机名加上域名），在Administrator’s Email Address下填入系统管理员的联系电子邮件地址（比如：admin@wuhua.com），上述三条信息仅供参考，其中联系电子邮件地址会在当系统故障时提供给访问者，三条信息均可任意填写，无效的也行。下面有两个选择，图片上选择的是为系统所有用户安装，使用默认的80端口，并作为系统服务自动启动；另外一个是仅为当前用户安装，使用端口8080，手动启动。一般选择如图所示。按“Next”继续。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-3987a2824bb08134.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>5、选择安装类型:typical(典型安装)、custom(自定义安装)</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-205a22fb01615255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>6、选择安装的组件及安装位置</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-f95317186c75a689.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>7.指定安装位置为c:\apache，当然用户也可以选择自定义安装。如果选择自定安装的话，就省略了第6、7步</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-485709615ae8677e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>8.返回用户刚才设置的界面</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-de2e38ea6a46c07c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>9.确认设置，如果用户感觉有哪些设置还需要进行调整，可以单击”Back”按钮后，重新进行设置，如果感觉设置无误了，可以进接单击”Install”按钮进行安装！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-77eb957851a2def2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>10、出现安装进度条 </p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-f08800dc7f68e4ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>11、安装完毕</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-072cfb8c2a88ae0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>在正常情况下，在屏幕右下角出现了Apache的图标；而且这个图标的颜色应该是绿色的，表示Apache已经在正常运行了，但有时可能出现红色的情况，这表明Apache配置的过程中出现了错误，没有关系，我们一会再来调试这个错误！</p>
<p>五、配置Apache</p>
<ol>
<li>打开Apache的配置文件—httpd.conf，打开方法如下图<br><img src="http://upload-images.jianshu.io/upload_images/2255249-ab4a8e4dac0a33ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<ol>
<li>查找关键字“DocumentRoot”（也就是网站根目录），找到如下图所示地方，然后将””内的地址改成你的网站根目录，地址格式请照图上的写，主要是一般文件地址的“\”在Apache里要改成“/”。<br><img src="http://upload-images.jianshu.io/upload_images/2255249-0641bca74bff0e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<ol>
<li><p>查找Directory关键字，其设置的目录位置必须为DocumentRoot相同</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-e9bb302a537212a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li><p>查找DirectoryIndex关键字,也就是在仅指定目录的情况下，默认显示的文件名。可以添加很多，系统会根据从左至右的顺序来优先显示，以单个半角空格隔开，比如有些网站的首页是index.htm，就在光标那里加上“index.htm ”文件名是任意的，不一定非得“index.html”，比如“test.php”等，都可以。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-330c206dcd01152d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li><p>查找LoadModule关键词，并添加以下语句</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-640b4690f972cd16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<p>php5_module “c:\php\php5apache2_2.dll”</p>
<p>PHPIniDir “c:\php” </p>
<p>AddType application/x-httpd-php .php</p>
<ol>
<li><p>指定apache服务器监听的端口号Listen 8080</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-b973b131f7804c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<ol>
<li>保存设置并重启Apache</li>
</ol>
<p>六、安装测试</p>
<p>在主目录下创建文本文件，然后双击进入文件的编辑状态，添加以下语句</p>
<p>&lt;?php</p>
<p>phpinfo();</p>
<p>?&gt;</p>
<p>保存文件后，将其重命名为index.php</p>
<p>启动浏览器，在地址栏中输入 <a href="http://127.0.0.1:8080" target="_blank" rel="external">http://127.0.0.1:8080</a><br>如果用户看到以下界面，则证明Apache环境已经搭建好了，现在可以开始PHP之旅了…<br><img src="http://upload-images.jianshu.io/upload_images/2255249-109bda58caba8eae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>   搭建PHP 运行环境中可能出现的问题及处理方法<br>        初学者在搭建PHP运行环境中经常可能遇到一些错误，这个时候可能就无所事从了！其实，错误是任何人都难免的，即使是程序高手！关键是我们如何来找到错误并且纠正它！当用户安装好Apache后，在开始菜单了就多了一项Apache HTTP Server 2.2的选项(这一项目的名称与用户安装的Apache版本是相关的)，我们可以通过”Configuare Apache Server”来测试我们刚刚做的配置！</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-c126bcf5bc09343c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>1、 错误一：DocumentRoot must be a directory</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/2255249-290dff9cc8b50b36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>如果出现这个错误，则证明Apache所指定的主目录不存在或者主目录的名称输入有错误！应该打开httpd.conf文件后纠正DocumentRoot的配置。</p>
<p>2、 错误二：80端口被占用</p>
<p>如果出现这个错误则需要在Apache的配置文件中将listen 80的端口号修改为没有被占用的端口号即可。</p>
<p>周知端口(Well Known Ports)</p>
<p>周知端口是众所周知的端口号，范围从0到1023，其中80端口分配给WWW服务，21端口分配给FTP服务等。我们在IE的地址栏里输入一个网址的时候（例如：www.123.com）是不必指定端口号的，因为在默认情况下WWW服务的端口号是”80”。 </p>
<p>网络服务是可以使用其他端口号的，如果不是默认的端口号则应该在地址栏上指定端口号，方法是在地址后面加上冒号”:”（半角），再加上端口号。比如使用”8080”作为WWW服务的端口，则需要在地址栏里输入”www.123.com:8080”。 </p>
<p>但是有些系统协议使用固定的端口号，它是不能被改变的，比如139端口专门用于NetBIOS与TCP/IP之间的通信，不能手动改变。 </p>
<p>动态端口（Dynamic Ports） </p>
<p>动态端口的范围是从1024到65535。之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。动态分配是指当一个系统进程或应用程序进程需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。当这个进程关闭时，同时也就释放了所占用的端口号。</p>
<p>3、 错误三：当运行PHP文件时浏览器询问是否下载文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-c29fb6bb9d94ea48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>如果出现这个错误，则证明Apache不支持PHP类型的文件，所以我们需要检测Apache配置文件中的AddType application/x-httpd-php .php中的语句是否书写正确。</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/10/16/基于Windows环境下的PHP开发环境搭建/">http://DiorsCoder.github.io/2016/10/16/基于Windows环境下的PHP开发环境搭建/</a></p>
]]></content>
    
    <summary type="html">
    
      基于Windows环境下的PHP开发环境搭建
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Apache" scheme="http://DiorsCoder.github.io/tags/Apache/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>linux下nginx配置虚拟主机！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/Linux%E4%B8%8BNginx%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/Linux下Nginx配置虚拟主机！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:19:53.284Z</updated>
    
    <content type="html"><![CDATA[<p>什么虚拟主机?<br>一台linux服务器上放置多套网站:<br>一家公司可能企业网站<br>要点:<br>一旦一台linux服务器上加设虚拟主机，则不能再用ip来访问这台linux服务器，而应该用每个虚拟主机网站的相应域名来访问相应的网站<br>通过一台服务器的同一个ip同一个端口用不同的域名去访问不同的网站</p>
<p>1.准备两个网站,一个是baidu，一个是sina<br>2.在nginx中进行设置，准备两个网站的虚拟主机<br>自我总结：<br>１.通过　ps  -ef | grep nginx　命令获取ｎｇｉｎｘ安装目录。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-8f5c48eb6e3ff53f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>２.打开/etc/nginx/vhost　目录，新建ｂａｉｄｕ．ｃｏｎｆ，编辑<br>　vi /usr/local/nginx/conf/nginx.conf　：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">    //全局配置</div><div class="line">    server&#123;</div><div class="line">            //局部配置 </div><div class="line">            name www.baidu.com</div><div class="line">            html /web/baidu</div><div class="line">    &#125;</div><div class="line">    server&#123;</div><div class="line">            //局部配置 </div><div class="line">            name www.sina.com</div><div class="line">            html /web/sina</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详细配置:<br><code>server {
        listen       80;
        server_name  www.baidu.com;
        access_log  logs/baidu.access.log  main;
        location / {
            root   /web/baidu;
            index  index.html index.htm;
        }
    }
    server {
        listen       80;
        server_name  www.sina.com;
        access_log  logs/sina.access.log  main;
        location / {
            root   /web/sina;
            index  index.html index.htm;
        }
    }</code>　<br>重新启动服务或者重新加载服务:<br>1.pkill nginx<br>//关闭nginx进程</p>
<p>2./usr/local/nginx/sbin/nginx<br>//重新启动nginx服务</p>
<p>重新加载服务或者平滑重启:<br>1.pkill -HUP nginx<br>//把配置文件中的新更改的东西加载到正在运行nginx的进程中，接着对用户提供服务，但是nginx进程并没有关闭.</p>
<p>用域名去访问web服务器，需要dns服务器支持,还可能用自己系统中的hosts解析文件来帮你解析域名:</p>
<p>C:\Windows\System32\drivers\etc<br>vi hosts<br>192.168.100.1 www.baidu.com<br>192.168.100.1 www.sina.com</p>
<p>lnmp集成包安装步骤：<a href="https://lnmp.org/install.html" target="_blank" rel="external">https://lnmp.org/install.html</a></p>
<p>lnmp集成包配置虚拟主机：<a href="http://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="external">http://lnmp.org/faq/lnmp-vhost-add-howto.html</a></p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/Linux下Nginx配置虚拟主机！/">http://DiorsCoder.github.io/2016/08/16/Linux下Nginx配置虚拟主机！/</a></p>
]]></content>
    
    <summary type="html">
    
      linux下nginx配置虚拟主机！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Linux" scheme="http://DiorsCoder.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://DiorsCoder.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>大数据量高并发的数据库优化！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/大数据量高并发的数据库优化！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:00:29.454Z</updated>
    
    <content type="html"><![CDATA[<pre><code>一、数据库结构的设计
如果不能设计一个合理的数据库模型，不仅会增加客户端和服务器段程序的编程和维护的难度，而且将会影响系统实际运行的性能。所以，在一个系统开始实施之前，完备的数据库模型的设计是必须的。
在一个系统分析、设计阶段，因为数据量较小，负荷较低。我们往往只注意到功能的实现，而很难注意到性能的薄弱之处，等到系统投入实际运行一段时间后，才发现系统的性能在降低，这时再来考虑提高系统性能则要花费更多的人力物力，而整个系统也不可避免的形成了一个打补丁工程。
所以在考虑整个系统的流程的时候，我们必须要考虑，在高并发大数据量的访问情况下，我们的系统会不会出现极端的情况。（例如：对外统计系统在7月16日出现的数据异常的情况，并发大数据量的的访问造成，数据库的响应时间不能跟上数据刷新的速度造成。具体情况是：在日期临界时（00：00：00），判断数据库中是否有当前日期的记录，没有则插入一条当前日期的记录。在低并发访问的情况下，不会发生问题，但是当日期临界时的访问量相当大的时候，在做这一判断的时候，会出现多次条件成立，则数据库里会被插入多条当前日期的记录，从而造成数据错误。），数据库的模型确定下来之后，我们有必要做一个系统内数据流向图，分析可能出现的瓶颈。
为了保证数据库的一致性和完整性，在逻辑设计的时候往往会设计过多的表间关联，尽可能的降低数据的冗余。（例如用户表的地区，我们可以把地区另外存放到一个地区表中）如果数据冗余低，数据的完整性容易得到保证，提高了数据吞吐速度，保证了数据的完整性，清楚地表达数据元素之间的关系。而对于多表之间的关联查询（尤其是大数据表）时，其性能将会降低，同时也提高了客户端程序的编程难度，因此，物理设计需折衷考虑，根据业务规则，确定对关联表的数据量大小、数据项的访问频度，对此类数据表频繁的关联查询应适当提高数据冗余设计但增加了表间连接查询的操作，也使得程序的变得复杂，为了提高系统的响应时间，合理的数据冗余也是必要的。设计人员在设计阶段应根据系统操作的类型、频度加以均衡考虑。
</code></pre><p>   另外，最好不要用自增属性字段作为主键与子表关联。不便于系统的迁移和数据恢复。对外统计系统映射关系丢失（<strong><strong><strong><strong>**</strong></strong></strong></strong>）。<br>    原来的表格必须可以通过由它分离出去的表格重新构建。使用这个规定的好处是，你可以确保不会在分离的表格中引入多余的列，所有你创建的表格结构都与它们的实际需要一样大。应用这条规定是一个好习惯，不过除非你要处理一个非常大型的数据，否则你将不需要用到它。（例如一个通行证系统，我可以将 USERID，USERNAME，USERPASSWORD，单独出来作个表，再把USERID作为其他表的外键）<br>    表的设计具体注意的问题：<br>    1、数据行的长度不要超过8020字节，如果超过这个长度的话在物理页中这条数据会占用两行从而造成存储碎片，降低查询效率。<br>    2、能够用数字类型的字段尽量选择数字类型而不用字符串类型的（电话号码），这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接回逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。<br>    3、对于不可变字符类型char和可变字符类型varchar 都是8000字节,char查询快，但是耗存储空间，varchar查询相对慢一些但是节省存储空间。在设计字段的时候可以灵活选择，例如用户名、密码等长度变化不大的字段可以选择CHAR，对于评论等长度变化大的字段可以选择VARCHAR。<br>    4、字段的长度在最大限度的满足可能的需要的前提下，应该尽可能的设得短一些，这样可以提高查询的效率，而且在建立索引的时候也可以减少资源的消耗。</p>
<p>二、查询的优化<br>保证在实现功能的基础上，尽量减少对数据库的访问次数；通过搜索参数，尽量减少对表的访问行数,最小化结果集，从而减轻网络负担；能够分开的操作尽量分开处理，提高每次的响应速度；在数据窗口使用SQL时，尽量把使用的索引放在选择的首列；算法的结构尽量简单；在查询时，不要过多地使用通配符如SELECT <em> FROM T1语句，要用到几列就选择几列如：SELECT COL1,COL2 FROM T1；在可能的情况下尽量限制尽量结果集行数如：SELECT TOP 300 COL1,COL2,COL3 FROM T1,因为某些情况下用户是不需要那么多的数据的。<br>在没有建索引的情况下，数据库查找某一条数据，就必须进行全表扫描了，对所有数据进行一次遍历，查找出符合条件的记录。在数据量比较小的情况下，也许看不出明显的差别，但是当数据量大的情况下，这种情况就是极为糟糕的了。<br>SQL语句在SQL SERVER中是如何执行的，他们担心自己所写的SQL语句会被SQL SERVER误解。比如：<br>select </em> from table1 where name=’zhangsan’ and tID &gt; 10000<br>和执行:<br>select <em> from table1 where tID &gt; 10000 and name=’zhangsan’<br>一些人不知道以上两条语句的执行效率是否一样，因为如果简单的从语句先后上看，这两个语句的确是不一样，如果tID是一个聚合索引，那么后一句仅仅从表的 10000条以后的记录中查找就行了；而前一句则要先从全表中查找看有几个name=’zhangsan’的，而后再根据限制条件条件tID&gt; 10000来提出查询结果。<br>事实上，这样的担心是不必要的。SQL SERVER中有一个“查询分析优化器”，它可以计算出where子句中的搜索条件并确定哪个索引能缩小表扫描的搜索空间，也就是说，它能实现自动优化。虽然查询优化器可以根据where子句自动的进行查询优化，但有时查询优化器就会不按照您的本意进行快速查询。<br>在查询分析阶段，查询优化器查看查询的每个阶段并决定限制需要扫描的数据量是否有用。如果一个阶段可以被用作一个扫描参数（SARG），那么就称之为可优化的，并且可以利用索引快速获得所需数据。<br>SARG的定义：用于限制搜索的一个操作，因为它通常是指一个特定的匹配，一个值的范围内的匹配或者两个以上条件的AND连接。形式如下：<br>列名 操作符 &lt;常数 或 变量&gt; 或 &lt;常数 或 变量&gt; 操作符 列名<br>列名可以出现在操作符的一边，而常数或变量出现在操作符的另一边。如：<br>Name=’张三’<br>价格&gt;5000<br>5000&lt;价格<br>Name=’张三’ and 价格&gt;5000<br>如果一个表达式不能满足SARG的形式，那它就无法限制搜索的范围了，也就是SQL SERVER必须对每一行都判断它是否满足WHERE子句中的所有条件。所以一个索引对于不满足SARG形式的表达式来说是无用的。<br>    所以，优化查询最重要的就是，尽量使语句符合查询优化器的规则避免全表扫描而使用索引查询。<br>具体要注意的：<br>1.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br>select id from t where num=0<br>2.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。优化器将无法通过索引来确定将要命中的行数,因此需要搜索该表的所有行。<br>3.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num=10 or num=20<br>可以这样查询：<br>select id from t where num=10<br>union all<br>select id from t where num=20<br>4.in 和 not in 也要慎用，因为IN会使系统无法使用索引,而只能直接搜索表中的数据。如：<br>select id from t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了：<br>select id from t where num between 1 and 3<br>5.尽量避免在索引过的字符数据中，使用非打头字母搜索。这也使得引擎无法利用索引。<br>见如下例子：<br>SELECT </em> FROM T1 WHERE NAME LIKE ‘%L%’<br>SELECT <em> FROM T1 WHERE SUBSTING(NAME,2,1)=’L’<br>SELECT </em> FROM T1 WHERE NAME LIKE ‘L%’<br>即使NAME字段建有索引，前两个查询依然无法利用索引完成加快操作，引擎不得不对全表所有数据逐条操作来完成任务。而第三个查询能够使用索引来加快操作。<br>6.必要时强制查询优化器使用某个索引，如在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>select id from t where num=@num<br>可以改为强制查询使用索引：<br>select id from t with(index(索引名)) where num=@num<br>7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>SELECT <em> FROM T1 WHERE F1/2=100<br>应改为:<br>SELECT </em> FROM T1 WHERE F1=100<em>2<br>SELECT </em> FROM RECORD WHERE SUBSTRING(CARD_NO,1,4)=’5378’<br>应改为:<br>SELECT <em> FROM RECORD WHERE CARD_NO LIKE ‘5378%’<br>SELECT member_number, first_name, last_name FROM members<br>WHERE DATEDIFF(yy,datofbirth,GETDATE()) &gt; 21<br>应改为:<br>SELECT member_number, first_name, last_name FROM members<br>WHERE dateofbirth &lt; DATEADD(yy,-21,GETDATE())<br>即：任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。<br>8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where substring(name,1,3)=’abc’–name以abc开头的id<br>select id from t where datediff(day,createdate,’2005-11-30’)=0–‘2005-11-30’生成的id<br>应改为:<br>select id from t where name like ‘abc%’<br>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’<br>9.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。<br>10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。<br>11.很多时候用 exists是一个好的选择：<br>elect num from a where num in(select num from b)<br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)<br>SELECT SUM(T1.C1)FROM T1 WHERE(<br>(SELECT COUNT(</em>)FROM T2 WHERE T2.C2=T1.C2&gt;0)<br>SELECT SUM(T1.C1) FROM T1WHERE EXISTS(<br>SELECT <em> FROM T2 WHERE T2.C2=T1.C2)<br>两者产生相同的结果，但是后者的效率显然要高于前者。因为后者不会产生大量锁定的表扫描或是索引扫描。<br>如果你想校验表里是否存在某条纪录，不要用count(</em>)那样效率很低，而且浪费服务器资源。可以用EXISTS代替。如：<br>IF (SELECT COUNT(<em>) FROM table_name WHERE column_name = ‘xxx’)<br>可以写成：<br>IF EXISTS (SELECT </em> FROM table_name WHERE column_name = ‘xxx’)<br>经常需要写一个T_SQL语句比较一个父结果集和子结果集，从而找到是否存在在父结果集中有而在子结果集中没有的记录，如：<br>SELECT a.hdr_key FROM hdr_tbl a—- tbl a 表示tbl用别名a代替<br>WHERE NOT EXISTS (SELECT * FROM dtl_tbl b WHERE a.hdr_key = b.hdr_key)<br>SELECT a.hdr_key FROM hdr_tbl a<br>LEFT JOIN dtl_tbl b ON a.hdr_key = b.hdr_key WHERE b.hdr_key IS NULL<br>SELECT hdr_key FROM hdr_tbl<br>WHERE hdr_key NOT IN (SELECT hdr_key FROM dtl_tbl)<br>三种写法都可以得到同样正确的结果，但是效率依次降低。<br>12.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。<br>13.避免频繁创建和删除临时表，以减少系统表资源的消耗。<br>14.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。<br>15.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。<br>16.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。<br>17.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。<br>18.尽量避免大事务操作，提高系统并发能力。<br>19.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 </p>
<ol>
<li>避免使用不兼容的数据类型。例如float和int、char和varchar、binary和varbinary是不兼容的。数据类型的不兼容可能使优化器无法执行一些本来可以进行的优化操作。例如:<br>SELECT name FROM employee WHERE salary &gt; 60000<br>在这条语句中,如salary字段是money型的,则优化器很难对其进行优化,因为60000是个整型数。我们应当在编程时将整型转化成为钱币型,而不要等到运行时转化。<br>21.充分利用连接条件，在某种情况下，两个表之间可能不只一个的连接条件，这时在 WHERE 子句中将连接条件完整的写上，有可能大大提高查询速度。<br>例：<br>SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO<br>SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO AND A.ACCOUNT_NO=B.ACCOUNT_NO<br>第二句将比第一句执行快得多。<br>22、使用视图加速查询<br>把表的一个子集进行排序并创建视图，有时能加速查询。它有助于避免多重排序 操作，而且在其他方面还能简化优化器的工作。例如：<br>SELECT cust.name，rcvbles.balance，……other columns<br>FROM cust，rcvbles<br>WHERE cust.customer_id = rcvlbes.customer_id<br>AND rcvblls.balance&gt;0<br>AND cust.postcode&gt;“98000”<br>ORDER BY cust.name<br>如果这个查询要被执行多次而不止一次，可以把所有未付款的客户找出来放在一个视图中，并按客户的名字进行排序：<br>CREATE VIEW DBO.V_CUST_RCVLBES<br>AS<br>SELECT cust.name，rcvbles.balance，……other columns<br>FROM cust，rcvbles<br>WHERE cust.customer_id = rcvlbes.customer_id<br>AND rcvblls.balance&gt;0<br>ORDER BY cust.name<br>然后以下面的方式在视图中查询：<br>SELECT ＊ FROM V_CUST_RCVLBES<br>WHERE postcode&gt;“98000”<br>视图中的行要比主表中的行少，而且物理顺序就是所要求的顺序，减少了磁盘I/O，所以查询工作量可以得到大幅减少。<br>23、能用DISTINCT的就不用GROUP BY<br>SELECT OrderID FROM Details WHERE UnitPrice &gt; 10 GROUP BY OrderID<br>可改为：<br>SELECT DISTINCT OrderID FROM Details WHERE UnitPrice &gt; 10<br>24.能用UNION ALL就不要用UNION<br>UNION ALL不执行SELECT DISTINCT函数，这样就会减少很多不必要的资源<br>35.尽量不要用SELECT INTO语句。<br>SELECT INOT 语句会导致表锁定，阻止其他用户访问该表。<br>上面我们提到的是一些基本的提高查询速度的注意事项,但是在更多的情况下,往往需要反复试验比较不同的语句以得到最佳方案。最好的方法当然是测试，看实现相同功能的SQL语句哪个执行时间最少，但是数据库中如果数据量很少，是比较不出来的，这时可以用查看执行计划，即：把实现相同功能的多条SQL语句考到查询分析器，按CTRL+L看查所利用的索引，表扫描次数（这两个对性能影响最大），总体上看询成本百分比即可。<br>三、算法的优化<br>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。<br>　　游标提供了对特定集合中逐行扫描的手段，一般使用游标逐行遍历数据，根据取出的数据不同条件进行不同的操作。尤其对多表和大表定义的游标（大的数据集合）循环很容易使程序进入一个漫长的等特甚至死机。<br>　 在有些场合，有时也非得使用游标，此时也可考虑将符合条件的数据行转入临时表中，再对临时表定义游标进行操作，可时性能得到明显提高。<br>（例如：对内统计第一版）<br>封装存储过程<br>四、建立高效的索引<br>　 创建索引一般有以下两个目的：维护被索引列的唯一性和提供快速访问表中数据的策略。大型数据库有两种索引即簇索引和非簇索引，一个没有簇索引的表是按堆结构存储数据，所有的数据均添加在表的尾部，而建立了簇索引的表，其数据在物理上会按照簇索引键的顺序存储，一个表只允许有一个簇索引，因此，根据B树结构，可以理解添加任何一种索引均能提高按索引列查询的速度，但会降低插入、更新、删除操作的性能，尤其是当填充因子（Fill Factor）较大时。所以对索引较多的表进行频繁的插入、更新、删除操作，建表和索引时因设置较小的填充因子，以便在各数据页中留下较多的自由空间，减少页分割及重新组织的工作。<br>索引是从数据库中获取数据的最高效方式之一。95% 的数据库性能问题都可以采用索引技术得到解决。作为一条规则，我通常对逻辑主键使用唯一的成组索引，对系统键（作为存储过程）采用唯一的非成组索引，对任何外键列[字段]采用非成组索引。不过，索引就象是盐，太多了菜就咸了。你得考虑数据库的空间有多大，表如何进行访问，还有这些访问是否主要用作读写。<br>实际上，您可以把索引理解为一种特殊的目录。微软的SQL SERVER提供了两种索引：聚集索引（clustered index，也称聚类索引、簇集索引）和非聚集索引（nonclustered index，也称非聚类索引、非簇集索引）。下面，我们举例来说明一下聚集索引和非聚集索引的区别：<br>其实，我们的汉语字典的正文本身就是一个聚集索引。比如，我们要查“安”字，就会很自然地翻开字典的前几页，因为“安”的拼音是“an”，而按照拼音排序汉字的字典是以英文字母“a”开头并以 “z”结尾的，那么“安”字就自然地排在字典的前部。如果您翻完了所有以“a”开头的部分仍然找不到这个字，那么就说明您的字典中没有这个字；同样的，如果查“张”字，那您也会将您的字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说，字典的正文部分本身就是一个目录，您不需要再去查其他目录来找到您需要找的内容。<br>我们把这种正文内容本身就是一种按照一定规则排列的目录称为“聚集索引”。<br>如果您认识某个字，您可以快速地从自动中查到这个字。但您也可能会遇到您不认识的字，不知道它的发音，这时候，您就不能按照刚才的方法找到您要查的字，而需要去根据“偏旁部首”查到您要找的字，然后根据这个字后的页码直接翻到某页来找到您要找的字。但您结合“部首目录”和“检字表”而查到的字的排序并不是真正的正文的排序方法，比如您查 “张”字，我们可以看到在查部首之后的检字表中“张”的页码是672页，检字表中“张”的上面是“驰”字，但页码却是63页，“张”的下面是“弩”字，页面是390页。很显然，这些字并不是真正的分别位于“张”字的上下方，现在您看到的连续的“驰、张、弩”三字实际上就是他们在非聚集索引中的排序，是字典正文中的字在非聚集索引中的映射。我们可以通过这种方式来找到您所需要的字，但它需要两个过程，先找到目录中的结果，然后再翻到您所需要的页码。<br>我们把这种目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚集索引”。<br>进一步引申一下，我们可以很容易的理解：每个表只能有一个聚集索引，因为目录只能按照一种方法进行排序。<br>（一）何时使用聚集索引或非聚集索引<br>下面的表总结了何时使用聚集索引或非聚集索引（很重要）。<br>动作描述 使用聚集索引 使用非聚集索引<br>列经常被分组排序 应 应<br>返回某范围内的数据 应 不应<br>一个或极少不同值 不应 不应<br>小数目的不同值 应 不应<br>大数目的不同值 不应 应<br>频繁更新的列 不应 应<br>外键列 应 应<br>主键列 应 应<br>频繁修改索引列 不应 应</li>
</ol>
<p>事实上，我们可以通过前面聚集索引和非聚集索引的定义的例子来理解上表。如：返回某范围内的数据一项。比如您的某个表有一个时间列，恰好您把聚合索引建立在了该列，这时您查询2004年1月1日至2004年10月1日之间的全部数据时，这个速度就将是很快的，因为您的这本字典正文是按日期进行排序的，聚类索引只需要找到要检索的所有数据中的开头和结尾数据即可；而不像非聚集索引，必须先查到目录中查到每一项数据对应的页码，然后再根据页码查到具体内容。</p>
<p>（二）结合实际，谈索引使用的误区<br>理论的目的是应用。虽然我们刚才列出了何时应使用聚集索引或非聚集索引，但在实践中以上规则却很容易被忽视或不能根据实际情况进行综合分析。下面我们将根据在实践中遇到的实际问题来谈一下索引使用的误区，以便于大家掌握索引建立的方法。<br>1、主键就是聚集索引<br>这种想法笔者认为是极端错误的，是对聚集索引的一种浪费。虽然SQL SERVER默认是在主键上建立聚集索引的。<br>通常，我们会在每个表中都建立一个ID列，以区分每条数据，并且这个ID列是自动增大的，步长一般为1。我们的这个办公自动化的实例中的列Gid就是如此。此时，如果我们将这个列设为主键，SQL SERVER会将此列默认为聚集索引。这样做有好处，就是可以让您的数据在数据库中按照ID进行物理排序，但笔者认为这样做意义不大。<br>显而易见，聚集索引的优势是很明显的，而每个表中只能有一个聚集索引的规则，这使得聚集索引变得更加珍贵。<br>从我们前面谈到的聚集索引的定义我们可以看出，使用聚集索引的最大好处就是能够根据查询要求，迅速缩小查询范围，避免全表扫描。在实际应用中，因为ID号是自动生成的，我们并不知道每条记录的ID号，所以我们很难在实践中用ID号来进行查询。这就使让ID号这个主键作为聚集索引成为一种资源浪费。其次，让每个ID号都不同的字段作为聚集索引也不符合“大数目的不同值情况下不应建立聚合索引”规则；当然，这种情况只是针对用户经常修改记录内容，特别是索引项的时候会负作用，但对于查询速度并没有影响。<br>在办公自动化系统中，无论是系统首页显示的需要用户签收的文件、会议还是用户进行文件查询等任何情况下进行数据查询都离不开字段的是“日期”还有用户本身的“用户名”。<br>通常，办公自动化的首页会显示每个用户尚未签收的文件或会议。虽然我们的where语句可以仅仅限制当前用户尚未签收的情况，但如果您的系统已建立了很长时间，并且数据量很大，那么，每次每个用户打开首页的时候都进行一次全表扫描，这样做意义是不大的，绝大多数的用户1个月前的文件都已经浏览过了，这样做只能徒增数据库的开销而已。事实上，我们完全可以让用户打开系统首页时，数据库仅仅查询这个用户近3个月来未阅览的文件，通过“日期”这个字段来限制表扫描，提高查询速度。如果您的办公自动化系统已经建立的2年，那么您的首页显示速度理论上将是原来速度8倍，甚至更快。<br>2、只要建立索引就能显著提高查询速度<br>事实上，我们可以发现上面的例子中，第2、3条语句完全相同，且建立索引的字段也相同；不同的仅是前者在fariqi字段上建立的是非聚合索引，后者在此字段上建立的是聚合索引，但查询速度却有着天壤之别。所以，并非是在任何字段上简单地建立索引就能提高查询速度。<br>从建表的语句中，我们可以看到这个有着1000万数据的表中fariqi字段有5003个不同记录。在此字段上建立聚合索引是再合适不过了。在现实中，我们每天都会发几个文件，这几个文件的发文日期就相同，这完全符合建立聚集索引要求的：“既不能绝大多数都相同，又不能只有极少数相同”的规则。由此看来，我们建立“适当”的聚合索引对于我们提高查询速度是非常重要的。<br>3、把所有需要提高查询速度的字段都加进聚集索引，以提高查询速度<br>上面已经谈到：在进行数据查询时都离不开字段的是“日期”还有用户本身的“用户名”。既然这两个字段都是如此的重要，我们可以把他们合并起来，建立一个复合索引（compound index）。<br>很多人认为只要把任何字段加进聚集索引，就能提高查询速度，也有人感到迷惑：如果把复合的聚集索引字段分开查询，那么查询速度会减慢吗？带着这个问题，我们来看一下以下的查询速度（结果集都是25万条数据）：（日期列fariqi首先排在复合聚集索引的起始列，用户名neibuyonghu排在后列）<br>我们可以看到如果仅用聚集索引的起始列作为查询条件和同时用到复合聚集索引的全部列的查询速度是几乎一样的，甚至比用上全部的复合索引列还要略快（在查询结果集数目一样的情况下）；而如果仅用复合聚集索引的非起始列作为查询条件的话，这个索引是不起任何作用的。当然，语句1、2的查询速度一样是因为查询的条目数一样，如果复合索引的所有列都用上，而且查询结果少的话，这样就会形成“索引覆盖”，因而性能可以达到最优。同时，请记住：无论您是否经常使用聚合索引的其他列，但其前导列一定要是使用最频繁的列。<br>（三）其他注意事项<br>“水可载舟，亦可覆舟”，索引也一样。索引有助于提高检索性能，但过多或不当的索引也会导致系统低效。因为用户在表中每加进一个索引，数据库就要做更多的工作。过多的索引甚至会导致索引碎片。<br>所以说，我们要建立一个“适当”的索引体系，特别是对聚合索引的创建，更应精益求精，以使您的数据库能得到高性能的发挥。</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/大数据量高并发的数据库优化！/">http://DiorsCoder.github.io/2016/08/16/大数据量高并发的数据库优化！/</a></p>
]]></content>
    
    <summary type="html">
    
      大数据量高并发的数据库优化！
    
    </summary>
    
      <category term="MYSQL笔记" scheme="http://DiorsCoder.github.io/categories/MYSQL%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>linux安装lnmp集成包！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/Linux%E5%AE%89%E8%A3%85lnmp%E9%9B%86%E6%88%90%E5%8C%85%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/Linux安装lnmp集成包！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:19:57.133Z</updated>
    
    <content type="html"><![CDATA[<p>LNMP一键安装包 - Readme</p>
<p>LNMP一键安装包是什么?</p>
<p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RadHat/Fedora、Debian/Ubuntu/Raspbian/Deepin Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。同时提供一些实用的辅助工具如：虚拟主机管理、FTP用户管理、Nginx、MySQL/MariaDB、PHP的升级、常用缓存组件的安装、重置MySQL root密码、502自动重启、日志切割、SSH防护DenyHosts/Fail2Ban、备份等许多实用脚本。</p>
<p>LNMP官网：<a href="https://lnmp.org" target="_blank" rel="external">https://lnmp.org</a><br>作者: licess admin@lnmp.org</p>
<p>安装</p>
<p>安装前建议使用screen，执行：screen -S lnmp 后<br>执行<br>wget -c <a href="http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz" target="_blank" rel="external">http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.3-full.tar.gz &amp;&amp; cd lnmp1.3-full &amp;&amp; ./install.sh {lnmp|lnmpa|lamp}</p>
<p>如断线可使用screen -r lnmp 恢复。详细安装教程参考：<a href="https://lnmp.org/install.html" target="_blank" rel="external">https://lnmp.org/install.html</a><br>注意:1.3版增加了lnmp.conf配置文件，可以自定义下载服务器地址、数据库目录及nginx和php编译参数，不论安装升级都会调用该文件里的设置，安装或升级时可跟进需求自己更改。</p>
<p>常用功能</p>
<p>以下操作需lnmp目录下执行，如lnmp1.3-full或lnmp1.3</p>
<p>FTP服务器<br> 执行：./pureftpd.sh 安装，可使用lnmp ftp {add|list|del}进行管理。</p>
<p>升级脚本：<br> 执行：./upgrade.sh 按提示进行选择<br>也可以直接使用参数：./upgrade.sh {nginx|mysql|mariadb|php|phpa|m2m|phpmyadmin}<br>  参数: nginx 可升级至任意Nginx版本。<br>  参数: mysql 可升级至任意MySQL版本，MySQL升级风险较大，虽然会自动备份数据，依然建议自行再备份一下。<br>  参数: mariadb 可升级已安装的Mariadb，虽然会自动备份数据，依然建议自行再备份一下。<br>  参数: m2m    可从MySQL升级至Mariadb，虽然会自动备份数据，依然建议自行再备份一下。<br>  参数: php   仅适用于LNMP，可升级至大部分PHP版本。<br>  参数: phpa    可升级LNMPA/LAMP的PHP至大部分版本。<br>  参数: phpmyadmin    可升级phpMyadmin。</p>
<p>扩展插件<br>  执行: ./addons.sh {install|uninstall} {eaccelerator|xcache|memcached|opcache|redis|imagemagick|ioncube}<br>缓存加速：<br>  参数: xcache 安装时需选择版本和设置密码，<a href="http://yourIP/xcache/" target="_blank" rel="external">http://yourIP/xcache/</a> 进行管理，用户名 admin，密码为安装xcache时设置的。<br>  参数: redis<br>  参数: memcached 可选择php-memcache或php-memcached扩展。<br>  参数: opcache <a href="http://yourIP/ocp.php" target="_blank" rel="external">http://yourIP/ocp.php</a> 进行管理。<br>  参数: eaccelerator 安装。<br>    请勿安装多个缓存类扩展模块，多个可能导致网站出现问题 ！</p>
<p>图像处理：<br>  参数: ./addons.sh {install|uninstall} imageMagick imageMagick路径：/usr/local/imagemagick/bin/。</p>
<p>解密：<br>  IonCube，执行：./addons.sh {install|uninstall} ionCube 。</p>
<p>其他：<br>  可选1，执行：./php5.2.17.sh 可安装一个不与LNMP冲突的PHP 5.2.17单独存在，目录在/usr/local/php52/，使用时需要将nginx虚拟主机配置文件里的 php-cgi.sock 修改为 php-cgi52.sock即可调用PHP5.2.17。<br>  以下工具在lnmp安装包tools目录下<br>  可选2，执行：./reset_mysql_root_password.sh 可重置MySQL/MariaDB的root密码。<br>  可选3，执行：./check502.sh  可检测php-fpm是否挂掉,502报错时重启，配合crontab使用。<br>  可选4，执行：./cut_nginx_logs.sh 日志切割脚本。<br>  可选5，执行：./remove_disable_function.sh 运行此脚本可删掉禁用函数。</p>
<p>卸载<br>  卸载LNMP、LNMPA或LAMP可执行：./uninstall.sh 按提示选择即可卸载。</p>
<p>状态管理<br>  LNMP/LNMPA/LMAP状态管理：lnmp {start|stop|reload|restart|kill|status}<br>  Nginx状态管理：lnmp nginx或/etc/init.d/nginx {start|stop|reload|restart}<br>  MySQL状态管理：lnmp mysql或/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}<br>  MariaDB状态管理：lnmp mariadb或/etc/init.d/mariadb {start|stop|restart|reload|force-reload|status}<br>  PHP-FPM状态管理：lnmp php-fpm或/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}<br>  PureFTPd状态管理：lnmp pureftpd或/etc/init.d/pureftpd {start|stop|restart|kill|status}<br>  Apache状态管理：lnmp httpd或/etc/init.d/httpd {start|stop|restart|graceful|graceful-stop|configtest|status}</p>
<p>虚拟主机管理<br>  添加：lnmp vhost add<br>  删除：lnmp vhost del<br>  列出：lnmp vhost list</p>
<p>相关图形界面<br>  PHPMyAdmin：<a href="http://yourIP/phpmyadmin/" target="_blank" rel="external">http://yourIP/phpmyadmin/</a><br>  phpinfo：<a href="http://yourIP/phpinfo.php" target="_blank" rel="external">http://yourIP/phpinfo.php</a><br>  PHP探针：<a href="http://yourIP/p.php" target="_blank" rel="external">http://yourIP/p.php</a><br>  Xcache管理界面：<a href="http://yourIP/xcache/" target="_blank" rel="external">http://yourIP/xcache/</a><br>  Zend Opcache管理界面：<a href="http://yourIP/ocp.php" target="_blank" rel="external">http://yourIP/ocp.php</a></p>
<p>LNMP相关目录文件</p>
<p> 目录位置<br>  Nginx：/usr/local/nginx/<br>  MySQL：/usr/local/mysql/<br>  MariaDB：/usr/local/mariadb/<br>  PHP：/usr/local/php/<br>  PHPMyAdmin：/home/wwwroot/default/phpmyadmin/<br>  默认虚拟主机网站目录：/home/wwwroot/default/<br>  Nginx日志目录：/home/wwwlogs/</p>
<p> 配置文件：<br>  Nginx主配置文件：/usr/local/nginx/conf/nginx.conf<br>  MySQL/MariaDB配置文件：/etc/my.cnf<br>  PHP配置文件：/usr/local/php/etc/php.ini<br>  PHP-FPM配置文件：/usr/local/php/etc/php-fpm.conf<br>  PureFtpd配置文件：/usr/local/pureftpd/etc/pure-ftpd.conf<br>  Apache配置文件：/usr/local/apache/conf/httpd.conf</p>
<p>进入解压厚的lnmp文件夹,输入命令：./install.sh安装lnmp环境，<br>lnmp vhost list  查看虚拟主机列表，<br>lnmp vhost add 添加虚拟主机列表，<br>lnmp vhost del  删除虚拟主机列表，<br>service nginx restart 重启nginx服务器，<br>安装memcache和redis命令：./addons.sh install<br>技术支持</p>
<p>技术支持论坛：<a href="http://bbs.vpser.net/forum-25-1.html" target="_blank" rel="external">http://bbs.vpser.net/forum-25-1.html</a></p>
<p>问题：Another app is currently holding the yum lock; waiting for it to exit…   The other application is: PackageKit     Memory : 160 M RSS (567 MB VSZ)     Started: Mon Jul 11 20:16:35 2016 - 2:26:42 ago     State  : Sleeping, pid: 12855</p>
<p>解决：编辑器加载中another app is currently holding the yum lock;waiting for it to exit… 有时用yum升级一些文件时，会出现以下情况： another app is currently holding the yum lock;waiting for it to exit… 可以通过强制关掉yum进程： #rm -f /var/run/yum.pid 然后就可以使用yum了。 …</p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/Linux安装lnmp集成包！/">http://DiorsCoder.github.io/2016/08/16/Linux安装lnmp集成包！/</a></p>
]]></content>
    
    <summary type="html">
    
      linux安装lnmp集成包！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Linux" scheme="http://DiorsCoder.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql视图笔记!</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/MYSQL%E8%A7%86%E5%9B%BE%E7%AC%94%E8%AE%B0%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/MYSQL视图笔记！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T01:58:18.634Z</updated>
    
    <content type="html"><![CDATA[<p> mysql视图笔记：<br>视图是虚表，实际数据表的映射。实际数据发生变化视图也跟着变化。<br>当查询数据要关联多张表的时候，要写很长的sql语句，可以使用视图简化。<br>视图主要用来查询方便，如果修改也是可以的，一次只能修改一张实表的数据 。</p>
<p>文章分类表：<br><img src="http://upload-images.jianshu.io/upload_images/2255249-464d242fdd83e60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>文章表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-e7302c00ae4adf00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>文章视图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-8bad0074602637ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//创建文章视图（文章表关联文章分类表,最好是inner join 关联）</div><div class="line"> create view article as  </div><div class="line">select c.title cat_name,a.* from db_article a </div><div class="line">inner join db_article_cat c on a.cid = c.id </div><div class="line"></div><div class="line">//查询视图(实表数据变化查询结果也跟着变化)</div><div class="line">select * from article </div><div class="line"></div><div class="line">//更新视图</div><div class="line"></div><div class="line">1. 根据主键更新数据，一次更改多张表会失败  </div><div class="line">update article set cat_name = &apos;test&apos;,title = &apos;testabc&apos; where id=602 and cid=61</div><div class="line"></div><div class="line">2 根据主键更新数据，更新视图中的文章分类名称，根据视图文章ID，实际修改了文章分类表</div><div class="line">update article set cat_name =&apos;修改后的分类名称&apos;    where id =1  </div><div class="line"></div><div class="line">//删除视图，和删除表一样</div><div class="line">drop view article</div></pre></td></tr></table></figure></p>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/MYSQL视图笔记！/">http://DiorsCoder.github.io/2016/08/16/MYSQL视图笔记！/</a></p>
]]></content>
    
    <summary type="html">
    
      mysql视图笔记!
    
    </summary>
    
      <category term="MYSQL笔记" scheme="http://DiorsCoder.github.io/categories/MYSQL%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>大并发处理解决方案！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/%E5%A4%A7%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/大并发处理解决方案！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T03:01:36.195Z</updated>
    
    <content type="html"><![CDATA[<p>摘要： 大型网站，比如门户网站。在面对大量用户访问、高并发请求方面，基本的解决方案集中在这样几个环节：使用高性能的服务器、高性能的数据库、高效率的编程语言、还有高性能的Web容器。<br>关键词： 服务器数据库</p>
<p>一个小型的网站，比如个人网站，可以使用最简单的html静态页面就实现了，配合一些图片达到美化效果，所有的页面均存放在一个目录下，这样的网站对系统架构、性能的要求都很简单，随着互联网业务的不断丰富，网站相关的技术经过这些年的发展，已经细分到很细的方方面面，尤其对于大型网站来说，所采用的技术更是涉及面非常广，从硬件到软件、编程语言、数据库、WebServer、防火墙等各个领域都有了很高的要求，已经不是原来简单的html静态网站所能比拟的。</p>
<pre><code>大型网站，比如门户网站。在面对大量用户访问、高并发请求方面，基本的解决方案集中在这样几个环节：使用高性能的服务器、高性能的数据库、高效率的编程语言、还有高性能的Web容器。但是除了这几个方面，还没法根本解决大型网站面临的高负载和高并发问题。

上面提供的几个解决思路在一定程度上也意味着更大的投入，并且这样的解决思路具备瓶颈，没有很好的扩展性，下面我从低成本、高性能和高扩张性的角度来说说我的一些经验。

1、HTML静态化

其实大家都知道，效率最高、消耗最小的就是纯静态化的html页面，所以我们尽可能使我们的网站上的页面采用静态页面来实现，这个最简单的方法其实也是最有效的方法。但是对于大量内容并且频繁更新的网站，我们无法全部手动去挨个实现，于是出现了我们常见的信息发布系统CMS，像我们常访问的各个门户站点的新闻频道，甚至他们的其他频道，都是通过信息发布系统来管理和实现的，信息发布系统可以实现最简单的信息录入自动生成静态页面，还能具备频道管理、权限管理、自动抓取等功能，对于一个大型网站来说，拥有一套高效、可管理的CMS是必不可少的。

除了门户和信息发布类型的网站，对于交互性要求很高的社区类型网站来说，尽可能的静态化也是提高性能的必要手段，将社区内的帖子、文章进行实时的静态化，有更新的时候再重新静态化也是大量使用的策略，像Mop的大杂烩就是使用了这样的策略，网易社区等也是如此。

同时，html静态化也是某些缓存策略使用的手段，对于系统中频繁使用数据库查询但是内容更新很小的应用，可以考虑使用html静态化来实现，比如论坛中论坛的公用设置信息，这些信息目前的主流论坛都可以进行后台管理并且存储再数据库中，这些信息其实大量被前台程序调用，但是更新频率很小，可以考虑将这部分内容进行后台更新的时候进行静态化，这样避免了大量的数据库访问请求。

2、图片服务器分离

大家知道，对于Web服务器来说，不管是Apache、IIS还是其他容器，图片是最消耗资源的，于是我们有必要将图片与页面进行分离，这是基本上大型网站都会采用的策略，他们都有独立的图片服务器，甚至很多台图片服务器。这样的架构可以降低提供页面访问请求的服务器系统压力，并且可以保证系统不会因为图片问题而崩溃，在应用服务器和图片服务器上，可以进行不同的配置优化，比如apache在配置ContentType的时候可以尽量少支持，尽可能少的LoadModule，保证更高的系统消耗和执行效率。

3、数据库集群和库表散列

大型网站都有复杂的应用，这些应用必须使用数据库，那么在面对大量访问的时候，数据库的瓶颈很快就能显现出来，这时一台数据库将很快无法满足应用，于是我们需要使用数据库集群或者库表散列。

在数据库集群方面，很多数据库都有自己的解决方案，Oracle、Sybase等都有很好的方案，常用的MySQL提供的Master/Slave也是类似的方案，您使用了什么样的DB，就参考相应的解决方案来实施即可。

上面提到的数据库集群由于在架构、成本、扩张性方面都会受到所采用DB类型的限制，于是我们需要从应用程序的角度来考虑改善系统架构，库表散列是常用并且最有效的解决方案。我们在应用程序中安装业务和应用或者功能模块将数据库进行分离，不同的模块对应不同的数据库或者表，再按照一定的策略对某个页面或者功能进行更小的数据库散列，比如用户表，按照用户ID进行表散列，这样就能够低成本的提升系统的性能并且有很好的扩展性。sohu的论坛就是采用了这样的架构，将论坛的用户、设置、帖子等信息进行数据库分离，然后对帖子、用户按照板块和ID进行散列数据库和表，最终可以在配置文件中进行简单的配置便能让系统随时增加一台低成本的数据库进来补充系统性能。
</code></pre><p>4、缓存</p>
<pre><code>缓存一词搞技术的都接触过，很多地方用到缓存。网站架构和网站开发中的缓存也是非常重要。这里先讲述最基本的两种缓存。高级和分布式的缓存在后面讲述。

架构方面的缓存，对Apache比较熟悉的人都能知道Apache提供了自己的缓存模块，也可以使用外加的Squid模块进行缓存，这两种方式均可以有效的提高Apache的访问响应能力。

网站程序开发方面的缓存，Linux上提供的Memory Cache是常用的缓存接口，可以在web开发中使用，比如用Java开发的时候就可以调用MemoryCache对一些数据进行缓存和通讯共享，一些大型社区使用了这样的架构。另外，在使用web语言开发的时候，各种语言基本都有自己的缓存模块和方法，PHP有Pear的Cache模块，Java就更多了，。net不是很熟悉，相信也肯定有。

5、镜像

镜像是大型网站常采用的提高性能和数据安全性的方式，镜像的技术可以解决不同网络接入商和地域带来的用户访问速度差异，比如ChinaNet和EduNet之间的差异就促使了很多网站在教育网内搭建镜像站点，数据进行定时更新或者实时更新。在镜像的细节技术方面，这里不阐述太深，有很多专业的现成的解决架构和产品可选。也有廉价的通过软件实现的思路，比如Linux上的rsync等工具。

6、负载均衡

负载均衡将是大型网站解决高负荷访问和大量并发请求采用的终极解决办法。

负载均衡技术发展了多年，有很多专业的服务提供商和产品可以选择，我个人接触过一些解决方法，其中有两个架构可以给大家做参考。

1）硬件四层交换

第四层交换使用第三层和第四层信息包的报头信息，根据应用区间识别业务流，将整个区间段的业务流分配到合适的应用服务器进行处理。　第四层交换功能就象是虚IP，指向物理服务器。它传输的业务服从的协议多种多样，有HTTP、FTP、NFS、Telnet或其他协议。这些业务在物理服务器基础上，需要复杂的载量平衡算法。在IP世界，业务类型由终端TCP或UDP端口地址来决定，在第四层交换中的应用区间则由源端和终端IP地址、TCP和UDP端口共同决定。

在硬件四层交换产品领域，有一些知名的产品可以选择，比如Alteon、F5等，这些产品很昂贵，但是物有所值，能够提供非常优秀的性能和很灵活的管理能力。Yahoo中国当初接近2000台服务器使用了三四台Alteon就搞定了。

2）软件四层交换

大家知道了硬件四层交换机的原理后，基于OSI模型来实现的软件四层交换也就应运而生，这样的解决方案实现的原理一致，不过性能稍差。但是满足一定量的压力还是游刃有余的，有人说软件实现方式其实更灵活，处理能力完全看你配置的熟悉能力。

软件四层交换我们可以使用Linux上常用的LVS来解决，LVS就是Linux Virtual Server，他提供了基于心跳线heartbeat的实时灾难应对解决方案，提高系统的鲁棒性，同时可供了灵活的虚拟VIP配置和管理功能，可以同时满足多种应用需求，这对于分布式的系统来说必不可少。

一个典型的使用负载均衡的策略就是，在软件或者硬件四层交换的基础上搭建squid集群，这种思路在很多大型网站包括搜索引擎上被采用，这样的架构低成本、高性能还有很强的扩张性，随时往架构里面增减节点都非常容易。
</code></pre><hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/大并发处理解决方案！/">http://DiorsCoder.github.io/2016/08/16/大并发处理解决方案！/</a></p>
]]></content>
    
    <summary type="html">
    
      大并发处理解决方案！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>高并发高负载数据库架构策略！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%AB%98%E8%B4%9F%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84%E7%AD%96%E7%95%A5%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/高并发高负载数据库架构策略！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T03:01:16.423Z</updated>
    
    <content type="html"><![CDATA[<p>在WEB网站的规模从小到大不断扩展的过程中，数据库的访问压力也不断的增加，数据库的架构也需要动态扩展，在数据库的扩展过程基本上包含如下几步，每一个扩展都可以比上一步骤的部署方式的性能得到数量级的提升。 </p>
<ol>
<li>WEB应用和数据库部署在同一台服务器上<br>一般的小规模的网站采用这种方式，用户量、数据量、并发访问量都比较小，否则单台服务器无法承受，并且在遇到性能瓶颈的时候升级硬件所需要的费用非常高 昂，在访问量增加的时候，应用程序和数据库都来抢占有限的系统资源，很快就又会遇到性能问题。 </li>
<li>WEB应用和数据库部署在各自独立的服务器上<br>web应用和数据库分开部署，WEB应用服务器和数据库服务器各司其职，在系统访问量增加的时候可以分别升级应用服务器和数据库服务器，这种部署方式是一般小规模网站的典型部署方式。在将应用程序进行性能优化并且使用数据库对象缓存策略的情况下，可以承载较大的访问量，比如2000用户，200个并发，百万级别的数据量。 </li>
<li>数据库服务器采用集群方式部署（比如Oracle的一个数据库多个实例的情况）<br>数据库集群方式能承担的负载是比较大的，数据库物理介质为一个磁盘阵列，多个数据库实例以虚拟IP方式向外部应用服务器提供数据库连接服务。这种部署方式 基本上可以满足绝大多数的常见WEB应用，但是还是不能满足大用户量、高负载、数据库读写访问非常频繁的应用。</li>
<li>数据库采用主从部署方式<br>在面向大众用户的博客、论谈、交友、CMS等系统中，有上百万的用户，有上千万的数据量，存在众多的数据库查询操作，也有较多的数据库写操作，并且在多数情况下都是读操作远大于写操作的。在这个时候，假如能将数据库的读写操作分离的话，对于系统来讲是一个很大的提高啦。数据库的主从部署方式就走到我们面前啦。<br>主从复制： 几乎所有的主流数据库都支持复制，这是进行数据库简单扩展的基本手段。下面以Mysql为例来说明，它支持主从复制，配置也并不复杂，只需要开启主服务器上的二进制日志以及在主服务器和从服务器上分别进行简单的配置和授权。Mysql的主从复制是一句主服务器的二进制日志文件进行的，主服务器日志中记录的操作会在从服务器上重放，从而实现复制，所以主服务器必须开启二进制日志，自动记录所有对于主数据库的更新操作，从服务器再定时到主服务器取得二进制日志 文件进行重放则完成了数据的复制。主从复制也用于自动备份。<br>读写分离： 为保证数据库数据的一致性，我们要求所有对于数据库的更新操作都是针对主数据库的，但是读操作是可以针对从数据库来进行。大多数站点的数据库读操作比写操作更加密集，而且查询条件相对复杂，数据库的大部分性能消耗在查询操作上了。<br>主从复制数据是异步完成的，这就导致主从数据库中的数据有一定的延迟，在读写分离的设计中必须要考虑这一点。以博客为例，用户登录后发表了一篇文章，他需要马上看到自己的文章，但是对于其它用户来讲可以允许延迟一段时间（1分钟/5分钟/30分钟），不会造成什么问题。这时对于当前用户就需要读主数据库，对于其他访问量更大的外部用户就可以读从数据库。<br>数据库反向代理： 在读写分离的方式使用主从部署方式的数据库的时候，会遇到一个问题，一个主数据库对应多台从服务器，对于写操作是针对主数据库的，数据库个数是唯一的，但 是对于从服务器的读操作就需要使用适当的算法来分配请求啦，尤其对于多个从服务器的配置不一样的时候甚至需要读操作按照权重来分配。 对于上述问题可以使用数据库方向代理来实现。就像WEB方向代理服务器一样，MYsql Proxy同样可以在SQL语句转发到后端的Mysql服务器之前对它进行修改。 </li>
<li>数据库垂直分割<br>主从部署数据库中，当写操作占了主数据库的CPU消耗的50%以上的时候，我们再增加从服务器的意义就不是很大了，因为所有的从服务器的写操作也将占到 CPU消耗的50%以上，一台从服务器提供出来查询的资源非常有限。数据库就需要重新架构了，我们需要采用数据库垂直分区技术啦。 最简单的垂直分区方式是将原来的数据库中独立的业务进行分拆（被分拆出来的部分与其它部分不需要进行Join连接查询操作），比如WEB站点的BLOG和 论坛，是相对独立的，与其它的数据的关联性不是很强，这时可以将原来的数据库拆分为一个BLog库，一个论坛库，以及剩余的表所组成的库。这三个库再各自进行主从数据库方式部署，这样整个数据库的压力就分担啦。<br>另外查询扩展性也是采用数据库分区最主要的原因之一。将一个大的数据库分成多个小的数据库可以提高查询的性能，因为每个数据库分区拥有自己的一小部分数据。假设您想扫描1亿条记录，对一个单一分区的数据库来讲，该扫描操作需要数据库管理器独立扫描一亿条记录，如果您将数据库系统做成50个分区，并将这1 亿条记录平均分配到这50个分区上，那么每个数据库分区的数据库管理器将只扫描200万记录。 </li>
<li>数据库水平分割<br>在数据库的垂直分区之后，假如我们的BLOG库又再次无法承担写操作的时候，我们又该怎么办呢？数据库垂直分区这种扩展方式又无能为力了，我们需要的是水 平分区。 水平分区意味着我们可以将同一个数据库表中的记录通过特定的算法进行分离，分别保存在不同的数据库表中，从而可以部署在不同的数据库服务器上。很多的大规模的站点基本上都是主从复制+垂直分区+水平分区这样的架构。水平分区并不依赖什么特定的技术，完全是逻辑层面的规划，需要的是经验和业务的细分。<br>如何分区呢？对于大型的WEB站点来说，必须分区，并且对于分区我们没有选择的余地，对于那些频繁访问导致站点接近崩溃的热点数据，我们必须分区。<br>在对数据分区的时候，我们必须要存在一个分区索引字段，比如USER_ID，它必须和所有的记录都存在关系，是分区数据库中的核心表的主键，在其它表中作 为外键，并且在使用主键的时候，该主键不能是自增长的，必须是业务主键才可以。<br>余数分区： 我们可以将User_ID%10后的值为依据存入到不同的分区数据库中，该算法简单高效，但是在分区数据库个数有变动的时候，整个系统的数据需要重新分布。<br>范围分区： 我们可以将User_ID的范围进行分区，比如1-100000范围为一个分区数据库，100001-200000范围为一个分区数据库，该算法在分区数 据库个数有变动的时候，系统非常有利于扩展，但是容易导致不同分区之间的压力不同，比如老用户所在的分区数据库的压力很大，但是新用户的分区数据库的压力偏小。<br>映射关系分区： 将对分区索引字段的每个可能的结果创建一个分区映射关系，这个映射关系非常庞大，需要将它们写入数据库中。比如当应用程序需要知道User_id为10的 用户的BLOG内容在那个分区时，它必须查询数据库获取答案，当然，我们可以使用缓存来提高性能。 这种方式详细保存了每一个记录的分区对应关系，所以各个分区有非常强的可伸缩性，可以灵活的控制，并且将数据库从一个分区迁移到另一个分区也很简单，也可以使各个分区通过灵活的动态调节来保持压力的分布平衡。</li>
</ol>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/高并发高负载数据库架构策略！/">http://DiorsCoder.github.io/2016/08/16/高并发高负载数据库架构策略！/</a></p>
]]></content>
    
    <summary type="html">
    
      高并发高负载数据库架构策略！
    
    </summary>
    
      <category term="PHP笔记" scheme="http://DiorsCoder.github.io/categories/PHP%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>mysql-sql优化笔记！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/MYSQL-sql%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0%EF%BC%81/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/MYSQL-sql优化笔记！/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T02:01:13.361Z</updated>
    
    <content type="html"><![CDATA[<p>分析问题的几个步骤：</p>
<p>#####1. 开启慢查询日志<br><img src="http://upload-images.jianshu.io/upload_images/2255249-0d4992b8bb33357c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>这个步骤就是为了记录慢查询的sql，为下个步骤做准备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//查看慢查询的日志记录是否开启 如上图</div><div class="line">show variables like &apos;%slow_query_log%&apos;;     </div><div class="line"></div><div class="line"> //设置慢查询开启的两种写法：</div><div class="line">set global slow_query_log=1;   </div><div class="line">set global slow_query_log=true;    </div><div class="line"></div><div class="line">//设置慢查询开启的两种写法：</div><div class="line">set global slow_query_log=0;      </div><div class="line">set global slow_query_log=false;</div></pre></td></tr></table></figure></p>
<p>#####2. 用explain 分析sql 语句</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-148339798a8663e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from crm_ego_members;     //分析sql语句</div></pre></td></tr></table></figure></p>
<p>######table：显示这一行的数据是关于哪张表的</p>
<p>######type：显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、 indexhe和ALL为 ALL 时，表示要扫描全表，尽量避免 </p>
<p>######possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句 </p>
<p>######key： 表示此 SQL 语句是否用到索引，null代表没有！很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引</p>
<p>######key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>
<p>######ref ： 显示索引的哪一列被使用了，如果可能的话，是一个常数</p>
<p>######rows：MYSQL认为必须检查的用来返回请求数据的行数</p>
<p>######Extra： 关于MYSQL如何解析查询的额外信息。坏的例子是Using temporary和Using filesort（文件排序，尽量避免使用），意思MYSQL根本不能使用索引，结果是检索会很慢<br>Extra列返回的描述的意义:</p>
<p>Distinct:一旦MYSQL找到了与行相联合匹配的行，就不再搜索了</p>
<p>Not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了</p>
<p>Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一</p>
<p>Using filesort: 看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行</p>
<p>Using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候</p>
<p>Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上</p>
<p>Where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</p>
<p>system 表只有一行：system表。这是const连接类型的特殊情况</p>
<p>const:表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待</p>
<p>eq_ref:在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用</p>
<p>ref:这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好</p>
<p>range:这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况</p>
<p>index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）</p>
<p>ALL:这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免.</p>
<p>注释：如何查看步骤的执行顺序呢？ 如果id相同，从上到下执行。如果id不同id大的先执行。</p>
<p>#####3. 使用profile 来查看sql 的执行周期，看看sql的问题出错在执行的哪个步骤上。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-b263bde3a693c72e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//用来查看mysql 前十几条查询 </div><div class="line">show profiles;</div><div class="line"></div><div class="line">//设置profile 功能开启</div><div class="line"> set profiling=1;    </div><div class="line"> set profiling=true;    </div><div class="line"></div><div class="line">//设置profile 功能关闭</div><div class="line"> set profiling=0;    </div><div class="line"> set profiling=false;    </div><div class="line"></div><div class="line"> show profile for query N;   //查看 第 N 条 sql 的执行生命周期</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-b4ca200f4317ed6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>#####4. 修改mysql 数据库配置文件，比如设置查询缓冲区的大小等等。<br>使用慢查询分析</p>
<p>在my.ini中：</p>
<p>long_query_time=1</p>
<p>log-slow-queries=d:\mysql5\logs\mysqlslow.log</p>
<p>把超过1秒的记录在慢查询日志中</p>
<p>可以用mysqlsla来分析之。也可以在mysqlreport中，有如</p>
<p>DMS分别分析了select ,update,insert,delete,replace等所占的百份比</p>
<p>4.MYISAM和INNODB的锁定</p>
<p>myisam中，注意是表锁来的，比如在多个UPDATE操作后，再SELECT时，会发现SELECT操作被锁定了，必须等所有UPDATE操作完毕后，再能SELECT</p>
<p>innodb的话则不同了，用的是行锁，不存在上面问题。</p>
<h5 id="另外数据到一定量时，sql语句优化效果才会明显！"><a href="#另外数据到一定量时，sql语句优化效果才会明显！" class="headerlink" title="另外数据到一定量时，sql语句优化效果才会明显！"></a>另外数据到一定量时，sql语句优化效果才会明显！</h5><hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/MYSQL-sql优化笔记！/">http://DiorsCoder.github.io/2016/08/16/MYSQL-sql优化笔记！/</a></p>
]]></content>
    
    <summary type="html">
    
      mysql-sql优化笔记！
    
    </summary>
    
      <category term="MYSQL笔记" scheme="http://DiorsCoder.github.io/categories/MYSQL%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="MYSQL" scheme="http://DiorsCoder.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Memcache学习教程！</title>
    <link href="http://DiorsCoder.github.io/2016/08/16/Memcache%E6%95%99%E7%A8%8B-!/"/>
    <id>http://DiorsCoder.github.io/2016/08/16/Memcache教程-!/</id>
    <published>2016-08-15T19:30:16.000Z</published>
    <updated>2017-07-11T03:00:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>一、Memcache概述<br>Memcache是danga.com的一个开源项目，可以类比于MySQL这样的服务。memcached 是高效、快速的分布式内存对象缓存系统，主要用于加速 WEB 动态应用程序。<br>用自己的话说，memcache是一个服务器端软件，跟apache、mysql一样，也有自己的端口。维护一个存在于内存中的hash表。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2255249-6ff6a55b278e74f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>二、Memcache工作原理<br>（1）初级<br>首先 memcached 是以守护程序方式运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前已知的客户端 API 包括 Perl/PHP/Python/Ruby/Java/C#/C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了，每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key 进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。注意，这些对象并不是持久的，服务停止之后，里边的数据就会丢失。</p>
<p>与许多 cache 工具类似，Memcached 的原理并不复杂。它采用了C/S的模式，在 server 端启动服务进程，在启动时可以指定监听的 ip，自己的端口号，所使用的内存大小等几个关键参数。一旦启动，服务就一直处于可用状态。Memcached 的目前版本是通过C实现，采用了单进程，单线程，异步I/O，基于事件 (event_based) 的服务方式.使用 libevent 作为事件通知实现。多个 Server 可以协同工作，但这些 Server 之间是没有任何通讯联系的，每个 Server 只是对自己的数据进行管理。Client 端通过指定 Server 端的 ip 地址(通过域名应该也可以)。需要缓存的对象或数据是以 key-&gt;value 对的形式保存在Server端。key 的值通过 hash 进行转换，根据 hash 值把 value 传递到对应的具体的某个 Server 上。当需要获取对象数据时，也根据 key 进行。首先对 key 进行 hash，通过获得的值可以确定它被保存在了哪台 Server 上，然后再向该 Server 发出请求。Client 端只需要知道保存 hash(key) 的值在哪台服务器上就可以了。</p>
<p>其实说到底，memcache 的工作就是在专门的机器的内存里维护一张巨大的 hash 表，来存储经常被读写的一些数组与文件，从而极大的提高网站的运行效率（当然花钱就是必不可免的事了，听说 MySpace 的每台 Cache 服务器都配备了至少 64G 的内存）。但是也要注意 memcache 不是万能的，毕竟网络方面的不稳定因素还是比较多的，如果不是很大的应用，我建议大家使用一些本地的轻量级的 Cache 库，比如 PHP 的 Cache_Lite 或者 Java 的 FileCache 等，最后希望大家读完这篇能有所收获 ：）<br>（2）高级<br>很多人把它当作和SharedMemory那种形式的存储载体来使用，虽然memcached使用了同样的“Key=&gt;Value”方式组织数据，但是它和共享内存、APC等本地缓存有非常大的区别。Memcached是分布式的，也就是说它不是本地的。它基于网络连接（当然它也可以使用 localhost）方式完成服务，本身它是一个独立于应用的程序或守护进程（Daemon方式）。</p>
<p>Memcached使用libevent库实现网络连接服务，理论上可以处理无限多的连接，但是它和Apache不同，它更多的时候是面向稳定的持续连接的，所以它实际的并发能力是有限制的。在保守情况下memcached的最大同时连接数为200，这和Linux线程能力有关系，这个数值是可以调整的。关于libevent可以参考相关文档。 Memcached内存使用方式也和APC不同。APC是基于共享内存和MMAP的，memcachd有自己的内存分配算法和管理方式，它和共享内存没有关系，也没有共享内存的限制，通常情况下，每个memcached进程可以管理2GB的内存空间，如果需要更多的空间，可以增加进程数。</p>
<p>三、为什么要在Web中使用（memcache解决什么问题）<br>（1）减少数据库压力<br>这个算是比较重要的，所有的数据基本上都是保存在数据库当中的，每次频繁的存取数据库，导致 数据库性能极具下降，无法同时服务更多的用户，比如MySQL，特别频繁的锁表，那么让Memcache来分担数据库的压力吧。我们需要一种改动比较小， 并且能够不会大规模改变前端的方式来进行改变目前的架构。<br><img src="http://upload-images.jianshu.io/upload_images/2255249-44370ab12307c2dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>我考虑的一种简单方法：<br>后端的数据库操作模块，把所有的Select操作提取出来 （update/delete/insert不管），然后把对应的SQL进行相应的hash算法计算得出一个hash数据key（比如MD5或者 SHA），然后把这个key去Memcache中查找数据，如果这个数据不存在，说明还没写入到缓存中，那么从数据库把数据提取出来，一个是数组类格式， 然后把数据在set到Memcache中，key就是这个SQL的hash值，然后相应的设置一个失效时间，比如一个小时，那么一个小时中的数据都是从缓 存中提取的，有效减少数据库的压力。缺点是数据不实时，当数据做了修改以后，无法实时到前端显示，并且还有可能对内存占用比较大，毕竟每次select出 来的数据数量可能比较巨大，这个是需要考虑的因素。 </p>
<p>（2）什么场合使用？<br>在很多时候，memcached都被滥用了，这当然少不了对它的抱怨。我经常在论坛上看见有人发贴，类似于“如何提高效率”，回复是“用memcached”，至于怎么用，用在哪里，用来干什么一句没有。memcached不是万能的，它也不是适用在所有场合。</p>
<p>Memcached是“分布式”的内存对象缓存系统，那么就是说，那些不需要“分布”的，不需要共享的，或者干脆规模小到只有一台服务器的应用，memcached不会带来任何好处，相反还会拖慢系统效率，因为网络连接同样需要资源，即使是UNIX本地连接也一样。 在我之前的测试数据中显示，memcached本地读写速度要比直接PHP内存数组慢几十倍，而APC、共享内存方式都和直接数组差不多。可见，如果只是本地级缓存，使用memcached是非常不划算的。</p>
<p>Memcached在很多时候都是作为数据库前端cache使用的。因为它比数据库少了很多SQL解析、磁盘操作等开销，而且它是使用内存来管理数据的，所以它可以提供比直接读取数据库更好的性能，在大型系统中，访问同样的数据是很频繁的，memcached可以大大降低数据库压力，使系统执行效率提升。另外，memcached也经常作为服务器之间数据共享的存储媒介，例如在SSO系统中保存系统单点登陆状态的数据就可以保存在memcached 中，被多个应用共享。</p>
<p>需要注意的是，memcached使用内存管理数据，所以它是易失的，当服务器重启，或者memcached进程中止，数据便会丢失，所以 memcached不能用来持久保存数据。很多人的错误理解，memcached的性能非常好，好到了内存和硬盘的对比程度，其实memcached使用内存并不会得到成百上千的读写速度提高，它的实际瓶颈在于网络连接，它和使用磁盘的数据库系统相比，好处在于它本身非常“轻”，因为没有过多的开销和直接的读写方式，它可以轻松应付非常大的数据交换量，所以经常会出现两条千兆网络带宽都满负荷了，memcached进程本身并不占用多少CPU资源的情况。</p>
<p>四、安装memcache（在服务器端）<br>（1）windows下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd进入memcached文件夹：</div><div class="line">输入memcached.exe -d install安装</div><div class="line">输入memcached.exe -d start 开启</div></pre></td></tr></table></figure></p>
<p>（2）在linux下</p>
<p>五、memcached服务器的管理<br>（1）Windows下：<br>启动<br>查看端口，是否启动成功</p>
<p>（2）Linux下：<br>运行 memcached 守护程序很简单，只需一个命令行即可，不需要修改任何配置文件（也没有配置文件给你修改 ）：</p>
<p>/usr/bin/memcached -d -m 128 -l 192.168.10.1 -p 10101 -u httpd</p>
<p>参数解释：<br>-d 以守护程序（daemon）方式运行 memcached；<br>-m 设置 memcached 可以使用的内存大小，单位为 M；<br>-l 设置监听的 IP 地址，如果是本机的话，通常可以不设置此参数；<br>-p 设置监听的端口，默认为 11211，所以也可以不设置此参数；<br>-u 指定用户，如果当前为 root 的话，需要使用此参数指定用户。</p>
<p>当然，还有其它参数可以用，man memcached 一下就可以看到了。</p>
<p>六、使用memcache（在客户端）<br>不同语言：可以是php/JAVA等<br>首先，建立连接。通过IP和端口。访问apache、mysql也是通过IP和端口。<br>其实，连接成功后，使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Add</div><div class="line">Set/replace</div><div class="line">Get</div><div class="line">Quit</div><div class="line">遍历：本身没提供。</div><div class="line">State子命令： stat items</div><div class="line">Stats cachedump 1 0</div></pre></td></tr></table></figure></p>
<p>附：PHP的Memcache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//连接</div><div class="line">$mem = new Memcache;</div><div class="line">$mem-&gt;connect(&quot;192.168.0.200&quot;, 12000);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//保存数据</div><div class="line">$mem-&gt;set(&apos;key1&apos;, &apos;This is first value&apos;, 0, 60);</div><div class="line">$val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">echo &quot;Get key1 value: &quot; . $val .&quot;&lt;br /&gt;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//替换数据</div><div class="line">$mem-&gt;replace(&apos;key1&apos;, &apos;This is replace value&apos;, 0, 60);</div><div class="line">$val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br /&gt;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//保存数组</div><div class="line">$arr = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;);</div><div class="line">$mem-&gt;set(&apos;key2&apos;, $arr, 0, 60);</div><div class="line">$val2 = $mem-&gt;get(&apos;key2&apos;);</div><div class="line">echo &quot;Get key2 value: &quot;;</div><div class="line">print_r($val2);</div><div class="line">echo &quot;&lt;br /&gt;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//删除数据</div><div class="line">$mem-&gt;delete(&apos;key1&apos;);</div><div class="line">$val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br /&gt;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//清除所有数据</div><div class="line">$mem-&gt;flush();</div><div class="line">$val2 = $mem-&gt;get(&apos;key2&apos;);</div><div class="line">echo &quot;Get key2 value: &quot;;</div><div class="line">print_r($val2);</div><div class="line">echo &quot;&lt;br /&gt;&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//关闭连接</div><div class="line">$mem-&gt;close();</div></pre></td></tr></table></figure>
<p>如果正常的话，浏览器将输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Get key1 value: This is first value</div><div class="line">Get key1 value: This is replace value</div><div class="line">Get key2 value: Array ( [0] =&gt; aaa [1] =&gt; bbb [2] =&gt; ccc [3] =&gt; ddd )</div><div class="line">Get key1 value:</div><div class="line">Get key2 value:</div></pre></td></tr></table></figure></p>
<p>程序代码分析</p>
<p>初始化一个Memcache的对象：<br>$mem = new Memcache;</p>
<p>连接到我们的Memcache服务器端，第一个参数是服务器的IP地址，也可以是主机名，第二个参数是Memcache的开放的端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$mem-&gt;connect(&quot;192.168.0.200&quot;, 12000);</div></pre></td></tr></table></figure></p>
<p>保存一个数据到Memcache服务器上，第一个参数是数据的key，用来定位一个数据，第二个参数是需要保存的数据内容，这里是一个字符串，第三个参数是一个标记，一般设置为0或者MEMCACHE_COMPRESSED就行了，第四个参数是数据的有效期，就是说数据在这个时间内是有效的，如果过去这个时间，那么会被Memcache服务器端清除掉这个数据，单位是秒，如果设置为0，则是永远有效，我们这里设置了60，就是一分钟有效时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$mem-&gt;set(‘key1‘, ‘This is first value&apos;, 0, 60);</div></pre></td></tr></table></figure></p>
<p>从Memcache服务器端获取一条数据，它只有一个参数，就是需要获取数据的key，我们这里是上一步设置的key1，现在获取这个数据后输出输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$val = $mem-&gt;get(&apos;key1′);</div><div class="line">echo &quot;Get key1 value: &quot; . $val;</div></pre></td></tr></table></figure></p>
<p>现在是使用replace方法来替换掉上面key1的值，replace方法的参数跟set是一样的，不过第一个参数key1是必须是要替换数据内容的key，最后输出了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$mem-&gt;replace(‘key1′, ‘This is replace value&apos;, 0, 60);</div><div class="line">$val = $mem-&gt;get(‘key1′);</div><div class="line">echo &quot;Get key1 value: &quot; . $val;</div></pre></td></tr></table></figure></p>
<p>同样的，Memcache也是可以保存数组的，下面是在Memcache上面保存了一个数组，然后获取回来并输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$arr = array(‘aaa&apos;, ‘bbb&apos;, ‘ccc&apos;, ‘ddd&apos;);</div><div class="line">$mem-&gt;set(‘key2′, $arr, 0, 60);</div><div class="line">$val2 = $mem-&gt;get(‘key2′);</div><div class="line">print_r($val2);</div></pre></td></tr></table></figure></p>
<p>现在删除一个数据，使用delte接口，参数就是一个key，然后就能够把Memcache服务器这个key的数据删除，最后输出的时候没有结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$mem-&gt;delete(‘key1′);</div><div class="line">$val = $mem-&gt;get(‘key1′);</div><div class="line">echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br&gt;&quot;;</div></pre></td></tr></table></figure></p>
<p>最后我们把所有的保存在Memcache服务器上的数据都清除，会发现数据都没有了，最后输出key2的数据为空，最后关闭连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$mem-&gt;flush();</div><div class="line">$val2 = $mem-&gt;get(‘key2′);</div><div class="line">echo &quot;Get key2 value: &quot;;</div><div class="line">print_r($val2);</div><div class="line">echo &quot;&lt;br&gt;&quot;;</div></pre></td></tr></table></figure></p>
<p>七、Memcache的安全<br>我们上面的 Memcache服务器端都是直接通过客户端连接后直接操作，没有任何的验证过程，这样如果服务器是直接暴露在互联网上的话是比较危险，轻则数据泄露被其 他无关人员查看，重则服务器被入侵，因为Mecache是以root权限运行的，况且里面可能存在一些我们未知的bug或者是缓冲区溢出的情况，这些都是 我们未知的，所以危险性是可以预见的。为了安全起见，我做两点建议，能够稍微的防止黑客的入侵或者数据的泄露。</p>
<p>内网访问<br>最好把两台服务器之间的访问是内网形态的，一般是Web服务器跟Memcache服务器之间。普遍 的服务器都是有两块网卡，一块指向互联网，一块指向内网，那么就让Web服务器通过内网的网卡来访问Memcache服务器，我们Memcache的服务 器上启动的时候就监听内网的IP地址和端口，内网间的访问能够有效阻止其他非法的访问。 </p>
<h1 id="memcached-d-m-1024-u-root-l-192-168-0-200-p-11211-c-1024-P-tmp-memcached-pid"><a href="#memcached-d-m-1024-u-root-l-192-168-0-200-p-11211-c-1024-P-tmp-memcached-pid" class="headerlink" title="memcached -d -m 1024 -u root -l 192.168.0.200 -p 11211 -c 1024 -P /tmp/memcached.pid"></a>memcached -d -m 1024 -u root -l 192.168.0.200 -p 11211 -c 1024 -P /tmp/memcached.pid</h1><p>Memcache服务器端设置监听通过内网的192.168.0.200的ip的11211端口，占用1024MB内存，并且允许最大1024个并发连接 </p>
<p>设置防火墙<br>防火墙是简单有效的方式，如果却是两台服务器都是挂在网的，并且需要通过外网IP来访问Memcache的话，那么可以考虑使用防火墙或者代理程序来过滤非法访问。<br>一般我们在Linux下可以使用iptables或者FreeBSD下的ipfw来指定一些规则防止一些非法的访问，比如我们可以设置只允许我们的Web服务器来访问我们Memcache服务器，同时阻止其他的访问。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># iptables -F </div><div class="line"># iptables -P INPUT DROP </div><div class="line"># iptables -A INPUT -p tcp -s 192.168.0.2 –dport 11211 -j ACCEPT </div><div class="line"># iptables -A INPUT -p udp -s 192.168.0.2 –dport 11211 -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>上面的iptables规则就是只允许192.168.0.2这台Web服务器对Memcache服务器的访问，能够有效的阻止一些非法访问，相应的也可以增加一些其他的规则来加强安全性，这个可以根据自己的需要来做。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"> /*</div><div class="line">          Windows下的Memcache安装：</div><div class="line">          [提示错误:failed to install service or service already installed]</div><div class="line">          解决方法：在系统盘中找到cmd.exe文件，点击右键，以管理员身份运行</div><div class="line">          3.切换到memcached目录下输入命令,启动memcache服务</div><div class="line">          &gt;memcached.exe -d start</div><div class="line">          4.测试memcache是否连接成功</div><div class="line">          H:/wamp/www/php api/memcache&gt;telnet 127.0.0.1 11211</div><div class="line">          [提示错误:&apos;telnet&apos; 不是内部或外部命令，也不是可运行的程序或批处理文件。]</div><div class="line">          注：windows7带有telnet，只是默认没有安装而已。</div><div class="line">          解决方法：</div><div class="line">          依次打开“开始”→“控制面板”→“打开或关闭Windows功能”，在打开的窗口处，寻找并勾选“Telnet客户端”，然后点击“确定”。顺利安装后，再在运行下输入此命令就OK了。</div><div class="line">          1.开始–&gt;控制面板–&gt;程序和功能</div><div class="line">          2.左侧 打开或者关闭windows功能</div><div class="line">          3.找到Telnet客户端，选择安装</div><div class="line"></div><div class="line">          5.输入：stats命令查看基本信息。</div><div class="line">          memcache连接测试运行成功!</div><div class="line">          1. 下载memcache的windows稳定版，解压放某个盘下面，比如在c:memcached</div><div class="line">          2. 在终端（也即cmd命令界面）下输入 ‘c:memcachedmemcached.exe -d install’ 安装</div><div class="line">          3. 再输入： ‘c:memcachedmemcached.exe -d start’ 启动。NOTE: 以后memcached将作为windows的一个服务每次开机时自动启动。这样服务器端已经安装完毕了。</div><div class="line">          4.下载php_memcache.dll，请自己查找对应的php版本的文件</div><div class="line">          不同版本的php 所使用的 php_memcache.dll 的版本不一样</div><div class="line">          如何使用php程序操作我们的memcached服务 curd.</div><div class="line">          步骤,准备工作.</div><div class="line">          (1)把 php_memcache.dll 文件拷贝 php的ext 下</div><div class="line">          (2)修改php.ini文件，加载 php_memcache.dll (该文件就是封装了一堆函数)</div><div class="line">          (3)重新启动apache,使用phpinfo()函数查看启用情况。</div><div class="line"></div><div class="line">          6.重新启动Apache，然后查看一下phpinfo，如果有memcache，那么就说明安装成功！</div><div class="line">          memcached的基本设置：</div><div class="line">          memcached服务器安全防护</div><div class="line">          1.内网访问，2，设置防火墙</div><div class="line">          ②如何把session数据放入到memcached服务中.</div><div class="line">          ①在php.ini 文件中</div><div class="line">          ;把session数据放入memcache</div><div class="line">          session.save_handler = memcache</div><div class="line">          ;这里指定放到哪个memcached服务器</div><div class="line">          session.save_path = &quot;tcp://127.0.0.1:11211&quot;</div><div class="line">         */</div><div class="line">        //创建一个mem对象实例 </div><div class="line">        //    $mem=new Memcache(); //$mem=new Memcache;</div><div class="line">        // //$mem-&gt;addServer(&apos;127.0.0.1&apos;,11211);</div><div class="line">        //   //$mem-&gt;addServer(&apos;127.0.0.1&apos;,11222);</div><div class="line">        // $mem-&gt;connect(&quot;127.0.0.1&quot;,11211)or die(&quot;connect failed&quot;);</div><div class="line">        //    echo $mem-&gt;set(&apos;name&apos;,123456,MEMCACHE_COMPRESSED,time()+31*3600*24)?&quot;add success!&quot;:&quot;add failed!&quot;;//添加</div><div class="line">        //         $mem-&gt;replace(&apos;name&apos;,&apos;abcdef&apos;);//修改 </div><div class="line">        // 	 echo $mem-&gt;get(&apos;name&apos;); die;</div><div class="line">        //   // echo $mem-&gt;delete(&apos;name&apos;)?&apos;ok&apos;:&apos;no&apos;;//删除 </div><div class="line">        //     $mem-&gt;flush();//删除 </div><div class="line">//连接Memcache</div><div class="line">        $mem = new Memcache;</div><div class="line">        $mem-&gt;connect(&quot;localhost&quot;, 11211) or die(&quot;链接失败！&quot;);</div><div class="line"></div><div class="line"></div><div class="line">//保存数据</div><div class="line">        $mem-&gt;set(&apos;key1&apos;, &apos;This is first value&apos;, 0, 60);</div><div class="line">        $val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">        echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">//替换数据</div><div class="line">        $mem-&gt;replace(&apos;key1&apos;, &apos;This is replace value&apos;, 0, 60);</div><div class="line">        $val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">        echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">//保存数组</div><div class="line">        $arr = array(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, &apos;ddd&apos;);</div><div class="line">        $mem-&gt;set(&apos;key2&apos;, $arr, 0, 60);</div><div class="line">        $val2 = $mem-&gt;get(&apos;key2&apos;);</div><div class="line">        echo &quot;Get key2 value: &quot;;</div><div class="line">        print_r($val2);</div><div class="line">        echo &quot;&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">//删除数据</div><div class="line">        $mem-&gt;delete(&apos;key1&apos;);</div><div class="line">        $val = $mem-&gt;get(&apos;key1&apos;);</div><div class="line">        echo &quot;Get key1 value: &quot; . $val . &quot;&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">//清除所有数据</div><div class="line">        $mem-&gt;flush();</div><div class="line">        $val2 = $mem-&gt;get(&apos;key2&apos;);</div><div class="line">        echo &quot;Get key2 value: &quot;;</div><div class="line">        print_r($val2);</div><div class="line">        echo &quot;&lt;br /&gt;&quot;;</div><div class="line"></div><div class="line">//关闭连接</div><div class="line">        $mem-&gt;close();</div></pre></td></tr></table></figure>
<hr>
<p><span style="font-weight:bolder;"><br>  版权声明：<br></span><br><span style="font-style:italic;"><br>  本文首发于： <a href="https://diorscoder.github.io/">李世龙的博客！</a>版权所有，翻版必究！<br></span><br>本文永久链接：<a href="http://DiorsCoder.github.io/2016/08/16/Memcache教程-!/">http://DiorsCoder.github.io/2016/08/16/Memcache教程-!/</a></p>
]]></content>
    
    <summary type="html">
    
      Memcache学习教程！
    
    </summary>
    
      <category term="Memcache笔记" scheme="http://DiorsCoder.github.io/categories/Memcache%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://DiorsCoder.github.io/tags/PHP/"/>
    
      <category term="Memcache" scheme="http://DiorsCoder.github.io/tags/Memcache/"/>
    
  </entry>
  
</feed>
